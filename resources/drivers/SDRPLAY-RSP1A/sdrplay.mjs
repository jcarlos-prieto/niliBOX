/*
 * Copyright (C) 2025 - Juan Carlos Prieto <nilibox@nilibox.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses>.
 */

//========================================== SDRPLAY
// Inspired on https://github.com/ericek111/libmirisdr-5


const MIRISDR_HW_DEFAULT = 0;
const MIRISDR_HW_SDRPLAY = 1;
const MIRISDR_BAND_AM1 = 0;
const MIRISDR_BAND_AM2 = 1;
const MIRISDR_BAND_VHF = 2;
const MIRISDR_BAND_3 = 3;
const MIRISDR_BAND_45 = 4;
const MIRISDR_BAND_L = 5;
const CTRL_TIMEOUT = 2000;
const DEFAULT_RATE = 2000000;
const DEFAULT_FREQ = 90000000;
const DEFAULT_GAIN = 43;
const MIRISDR_FORMAT_AUTO_ON = 0;
const MIRISDR_FORMAT_AUTO_OFF = 1;
const MIRISDR_FORMAT_252_S16 = 0;
const MIRISDR_FORMAT_336_S16 = 1;
const MIRISDR_FORMAT_384_S16 = 2;
const MIRISDR_FORMAT_504_S16 = 3;
const MIRISDR_FORMAT_504_S8 = 4;
const MIRISDR_BW_200KHZ = 0;
const MIRISDR_BW_300KHZ = 1;
const MIRISDR_BW_600KHZ = 2;
const MIRISDR_BW_1536KHZ = 3;
const MIRISDR_BW_5MHZ = 4;
const MIRISDR_BW_6MHZ = 5;
const MIRISDR_BW_7MHZ = 6;
const MIRISDR_BW_8MHZ = 7;
const MIRISDR_BW_MAX = 8;
const MIRISDR_IF_ZERO = 0;
const MIRISDR_IF_450KHZ = 1;
const MIRISDR_IF_1620KHZ = 2;
const MIRISDR_IF_2048KHZ = 3;
const MIRISDR_XTAL_19_2M = 0;
const MIRISDR_XTAL_22M = 1;
const MIRISDR_XTAL_24M = 2;
const MIRISDR_XTAL_24_576M = 3;
const MIRISDR_XTAL_26M = 4;
const MIRISDR_XTAL_38_4M = 5;
const MIRISDR_TRANSFER_BULK = 0;
const MIRISDR_TRANSFER_ISOC = 1;
const MIRISDR_ASYNC_INACTIVE = 0;
const MIRISDR_ASYNC_RUNNING = 2;
const MIRISDR_DC_OFFSET_CALIBRATION_STATIC = 0;
const MIRISDR_DC_OFFSET_CALIBRATION_PERIODIC1 = 1;
const MIRISDR_DC_OFFSET_CALIBRATION_PERIODIC2 = 2;
const MIRISDR_DC_OFFSET_CALIBRATION_PERIODIC3 = 3;
const MIRISDR_DC_OFFSET_CALIBRATION_ONE_SHOT = 4;
const MIRISDR_DC_OFFSET_CALIBRATION_CONTINUOUS = 5;
const MIRISDR_DC_OFFSET_CALIBRATION_SPEEDUP_OFF = 0;
const MIRISDR_DC_OFFSET_CALIBRATION_SPEEDUP_ON = 1;
const MIRISDR_MODE_AM = 0x01;
const MIRISDR_MODE_VHF = 0x02;
const MIRISDR_MODE_B3 = 0x04;
const MIRISDR_MODE_B45 = 0x08;
const MIRISDR_MODE_BL = 0x10;
const MIRISDR_UPCONVERT_MIXER_OFF = 0;
const MIRISDR_UPCONVERT_MIXER_ON = 1;
const MIRISDR_RF_SYNTHESIZER_OFF = 0;
const MIRISDR_RF_SYNTHESIZER_ON = 1;
const MIRISDR_AM_PORT1 = 0;
const MIRISDR_AM_PORT2 = 1;
const MIRISDR_IF_MODE_2048KHZ = 0;
const MIRISDR_IF_MODE_1620KHZ = 1;
const MIRISDR_IF_MODE_450KHZ = 2;
const MIRISDR_IF_MODE_ZERO = 3;
const MIRISDR_IF_LPMODE_NORMAL = 0;
const MIRISDR_IF_LPMODE_ONLY_Q = 1;
const MIRISDR_IF_LPMODE_ONLY_I = 2;
const MIRISDR_IF_LPMODE_LOW_POWER = 4;
const MIRISDR_VCO_LPMODE_NORMAL = 0;
const MIRISDR_VCO_LPMODE_LOW_POWER = 1;
const MIRISDR_LBAND_LNA_CALIBRATION_OFF = 0;
const MIRISDR_LBAND_LNA_CALIBRATION_ON = 1;
const MIRISDR_RF_SYNTHESIZER_RESERVED_PROGRAMMING = 0x28;
const BIAS_GPIO = 3;


function mirisdr_device(vid, pid, name, manufacturer, product)
{
    this.vid = vid;
    this.pid = pid;
    this.name = name;
    this.manufacturer = manufacturer;
    this.product = product;
}


const mirisdr_devices = [
                          new mirisdr_device(0x1df7, 0x2500, "SDRplay RSP1", "SDRPlay", "RSP1"),
                          new mirisdr_device(0x1df7, 0x3000, "SDRplay RSP1A", "SDRPlay", "RSP1A"),
                          new mirisdr_device(0x1df7, 0x3050, "SDRplay RSP1B", "SDRPlay", "RSP1B"),
                          new mirisdr_device(0x1df7, 0x3010, "SDRplay RSP2", "SDRPlay", "RSP2"),
                          new mirisdr_device(0x1df7, 0x3020, "SDRplay RSPduo", "SDRPlay", "RSPduo"),
                          new mirisdr_device(0x1df7, 0x3030, "SDRplay RSPdx", "SDRPlay", "RSPdx"),
                          new mirisdr_device(0x1df7, 0x3060, "SDRplay RSPdxR2", "SDRPlay", "RSPdxR2"),
                      ];


function hw_switch_freq_plan_t(low_cut, mode, upconvert_mixer_on, am_port, lo_div, band_select_word)
{
    this.low_cut = low_cut;
    this.mode = mode;
    this.upconvert_mixer_on = upconvert_mixer_on;
    this.am_port = am_port;
    this.lo_div = lo_div;
    this.band_select_word = band_select_word;
}


const hw_switch_freq_plan_default = [
                                      new hw_switch_freq_plan_t(0, MIRISDR_MODE_AM, MIRISDR_UPCONVERT_MIXER_ON, MIRISDR_AM_PORT2, 16, 0xf780),
                                      new hw_switch_freq_plan_t(12, MIRISDR_MODE_AM, MIRISDR_UPCONVERT_MIXER_ON, MIRISDR_AM_PORT2, 16, 0xff80),
                                      new hw_switch_freq_plan_t(30, MIRISDR_MODE_AM, MIRISDR_UPCONVERT_MIXER_ON, MIRISDR_AM_PORT2, 16, 0xf280),
                                      new hw_switch_freq_plan_t(50, MIRISDR_MODE_VHF, 0, 0, 32, 0xf380),
                                      new hw_switch_freq_plan_t(108, MIRISDR_MODE_B3, 0, 0, 16, 0xfa80),
                                      new hw_switch_freq_plan_t(250, MIRISDR_MODE_B3, 0, 0, 16, 0xf680),
                                      new hw_switch_freq_plan_t(259, 6, 0, 0, 8, 0xf680),
                                      new hw_switch_freq_plan_t(330, MIRISDR_MODE_B45, 0, 0, 4, 0xf380),
                                      new hw_switch_freq_plan_t(960, MIRISDR_MODE_BL, 0, 0, 2, 0xfa80),
                                      new hw_switch_freq_plan_t(2400, -1, 0, 0, 0, 0x0000)
                                  ];

const hw_switch_freq_plan_sdrplay = [
                                      new hw_switch_freq_plan_t(0, MIRISDR_MODE_AM, MIRISDR_UPCONVERT_MIXER_ON, MIRISDR_AM_PORT2, 16, 0xf580),
                                      new hw_switch_freq_plan_t(12, MIRISDR_MODE_AM, MIRISDR_UPCONVERT_MIXER_ON, MIRISDR_AM_PORT2, 16, 0xf580),
                                      new hw_switch_freq_plan_t(30, MIRISDR_MODE_AM, MIRISDR_UPCONVERT_MIXER_ON, MIRISDR_AM_PORT2, 16, 0xf580),
                                      new hw_switch_freq_plan_t(50, MIRISDR_MODE_VHF, 0, 0, 32, 0xf180),
                                      new hw_switch_freq_plan_t(112, MIRISDR_MODE_B3, 0, 0, 16, 0xf580),
                                      new hw_switch_freq_plan_t(250, MIRISDR_MODE_B3, 0, 0, 16, 0xf480),
                                      new hw_switch_freq_plan_t(261, 6, 0, 0, 8, 0xf480),
                                      new hw_switch_freq_plan_t(404, MIRISDR_MODE_B45, 0, 0, 4, 0xf580),
                                      new hw_switch_freq_plan_t(1000, MIRISDR_MODE_BL, 0, 0, 2, 0xf580),
                                      new hw_switch_freq_plan_t(2400, -1, 0, 0, 0, 0x0000)
                                  ];

const hw_switch_freq_plan = [
                              hw_switch_freq_plan_default,
                              hw_switch_freq_plan_sdrplay
                          ];


function mirisdr_write_reg(reg, val)
{
    if (!dev.dh)
        return;
    if (!dev.box)
        return;
    let value = (val & 0xff) << 8 | reg;
    let index = (val >> 8) & 0xffff;
    dev.box.USB_control_transfer(dev.dh, 0x40, 0x41, value, index, null, 0, CTRL_TIMEOUT);
}


function mirisdr_set_hard()
{
    let streaming = false;
    let reg3 = 0, reg4 = 0;
    let i, vco, n, fract;
    if (dev.async_status === MIRISDR_ASYNC_RUNNING) {
        streaming = true;
        mirisdr_streaming_stop();
    }
    if (dev.format_auto === MIRISDR_FORMAT_AUTO_ON) {
        if (dev.rate <= 6048000)
            dev.format = MIRISDR_FORMAT_252_S16;
        else if (dev.rate <= 8064000)
            dev.format = MIRISDR_FORMAT_336_S16;
        else if (dev.rate <= 9216000)
            dev.format = MIRISDR_FORMAT_384_S16;
        else
            dev.format = MIRISDR_FORMAT_504_S16;
    }
    switch (dev.format) {
    case MIRISDR_FORMAT_252_S16:
        mirisdr_write_reg(0x07, 0x0094);
        break;
    case MIRISDR_FORMAT_336_S16:
        mirisdr_write_reg(0x07, 0x0085);
        break;
    case MIRISDR_FORMAT_384_S16:
        mirisdr_write_reg(0x07, 0x00a5);
        break;
    case MIRISDR_FORMAT_504_S16:
    case MIRISDR_FORMAT_504_S8:
        mirisdr_write_reg(0x07, 0x0c94);
        break;
    }
    for (i = 4; i < 16; i += 2) {
        vco = dev.rate * i * 12;
        if (vco >= 202000000)
            break;
    }
    n = (vco / 48000000) | 0;
    fract = (0x200000 * (vco % 48000000) / 48000000) | 0;
    reg3 |= (0x03 & 3) << 0;
    reg3 |= (0x07 & (i / 2 - 1)) << 2;
    reg3 |= (0x03 & 0) << 5;
    reg3 |= (0x01 & (fract >> 20)) << 7;
    reg3 |= (0x0f & n) << 8;
    switch (dev.format) {
    case MIRISDR_FORMAT_252_S16:
        reg3 |= (0x0f & 0x01) << 12;
        break;
    case MIRISDR_FORMAT_336_S16:
        reg3 |= (0x0f & 0x05) << 12;
        break;
    case MIRISDR_FORMAT_384_S16:
        reg3 |= (0x0f & 0x09) << 12;
        break;
    case MIRISDR_FORMAT_504_S16:
    case MIRISDR_FORMAT_504_S8:
        reg3 |= (0x0f & 0x0d) << 12;
        break;
    }
    reg3 |= (0x01 & 1) << 16;
    reg4 |= (0xfffff & fract) << 0;
    mirisdr_write_reg(0x04, reg4);
    mirisdr_write_reg(0x03, reg3);
    if (streaming)
        mirisdr_streaming_start();
}


function mirisdr_set_soft()
{
    let reg0 = 0, reg2 = 2, reg5 = 5, reg3 = 3, regd = 0x0d;
    let n, thresh, frac, lo_div = 0, fvco = 0, rfvco = 0, offset = 0, afc = 0, a, b, c;
    let i = 0;
    let freq = (dev.freq * (1 + dev.ppm / 1000000)) | 0;

    while (freq >= 1000000 * hw_switch_freq_plan[dev.hw_flavour][i].low_cut) {
        if (hw_switch_freq_plan[dev.hw_flavour][i].mode < 0)
            break;
        i++;
    }
    let switch_plan = hw_switch_freq_plan[dev.hw_flavour][i - 1];
    if (switch_plan.mode === MIRISDR_MODE_AM) {
        reg0 |= MIRISDR_MODE_AM << 4;
        reg0 |= switch_plan.upconvert_mixer_on << 9;
        reg0 |= switch_plan.am_port << 11;
        if (switch_plan.upconvert_mixer_on)
            offset += 120000000;
        lo_div = 16;
        if (switch_plan.am_port === 0)
            dev.band = MIRISDR_BAND_AM1;
        else
            dev.band = MIRISDR_BAND_AM2;
    } else {
        reg0 |= switch_plan.mode << 4;
        lo_div = switch_plan.lo_div;
        if (switch_plan.mode === MIRISDR_MODE_VHF)
            dev.band = MIRISDR_BAND_VHF;
        else if (switch_plan.mode === MIRISDR_MODE_B3)
            dev.band = MIRISDR_BAND_3;
        else if (switch_plan.mode === MIRISDR_MODE_B45)
            dev.band = MIRISDR_BAND_45;
        else if (switch_plan.mode === MIRISDR_MODE_BL)
            dev.band = MIRISDR_BAND_L;
    }
    reg0 |= MIRISDR_RF_SYNTHESIZER_ON << 10;
    switch (dev.if_freq) {
    case MIRISDR_IF_ZERO:
        reg0 |= MIRISDR_IF_MODE_ZERO << 12;
        break;
    case MIRISDR_IF_450KHZ:
        reg0 |= MIRISDR_IF_MODE_450KHZ << 12;
        break;
    case MIRISDR_IF_1620KHZ:
        reg0 |= MIRISDR_IF_MODE_1620KHZ << 12;
        break;
    case MIRISDR_IF_2048KHZ:
        reg0 |= MIRISDR_IF_MODE_2048KHZ << 12;
        break;
    }
    switch (dev.bandwidth) {
    case MIRISDR_BW_200KHZ:
        reg0 |= 0x00 << 14;
        break;
    case MIRISDR_BW_300KHZ:
        reg0 |= 0x01 << 14;
        break;
    case MIRISDR_BW_600KHZ:
        reg0 |= 0x02 << 14;
        break;
    case MIRISDR_BW_1536KHZ:
        reg0 |= 0x03 << 14;
        break;
    case MIRISDR_BW_5MHZ:
        reg0 |= 0x04 << 14;
        break;
    case MIRISDR_BW_6MHZ:
        reg0 |= 0x05 << 14;
        break;
    case MIRISDR_BW_7MHZ:
        reg0 |= 0x06 << 14;
        break;
    case MIRISDR_BW_8MHZ:
        reg0 |= 0x07 << 14;
        break;
    case MIRISDR_BW_MAX:
        reg0 |= 0x07 << 14;
        regd |= (1 << 4);
        break;
    }
    switch (dev.xtal) {
    case MIRISDR_XTAL_19_2M:
        reg0 |= 0x00 << 17;
        break;
    case MIRISDR_XTAL_22M:
        reg0 |= 0x01 << 17;
        break;
    case MIRISDR_XTAL_24M:
    case MIRISDR_XTAL_24_576M:
        reg0 |= 0x02 << 17;
        break;
    case MIRISDR_XTAL_26M:
        reg0 |= 0x03 << 17;
        break;
    case MIRISDR_XTAL_38_4M:
        reg0 |= 0x04 << 17;
        break;
    }
    reg0 |= MIRISDR_IF_LPMODE_NORMAL << 20;
    reg0 |= MIRISDR_VCO_LPMODE_NORMAL << 23;
    fvco = (freq + offset) * lo_div;
    n = (fvco / 96000000) | 0;
    thresh = (96000000 / lo_div) | 0;
    frac = ((fvco % 96000000) / lo_div) | 0;
    for (a = thresh, b = frac; a !== 0;) {
        c = a;
        a = b % a;
        b = c;
    }
    thresh = (thresh / b) | 0;
    frac = (frac / b) | 0;
    a = ((thresh + 4094) / 4095) | 0;
    thresh = ((thresh + ((a / 2) | 0)) / a) | 0;
    frac = ((frac + ((a / 2) | 0)) / a) | 0;
    rfvco = ((96000000 * (n * thresh * 4096 + frac * 4096)) / (thresh * 4096 * lo_div)) | 0;
    if(freq + offset < rfvco)
        frac--;
    rfvco = ((96000000 * (n * thresh * 4096 + (frac * 4096 + afc))) / (thresh * 4096 * lo_div)) | 0;
    afc = (((freq + offset - rfvco) * thresh * 4096 * lo_div) / 96000000) | 0;
    reg3 |= (afc & 4095) << 4;
    reg5 |= (0xfff & thresh) << 4;
    reg5 |= MIRISDR_RF_SYNTHESIZER_RESERVED_PROGRAMMING << 16;
    reg2 |= (0xfff & frac) << 4;
    reg2 |= (0x3f & n) << 16;
    reg2 |= MIRISDR_LBAND_LNA_CALIBRATION_OFF << 22;
    // mirisdr_write_reg(0x08, switch_plan.band_select_word | (dev.bias ? 1 << (BIAS_GPIO + 8) : 0));
    mirisdr_write_reg(0x09, 0x0e);
    mirisdr_write_reg(0x09, reg3);
    mirisdr_write_reg(0x09, reg0);
    mirisdr_write_reg(0x09, reg5);
    mirisdr_write_reg(0x09, reg2);
    mirisdr_write_reg(0x09, regd);
}


function mirisdr_adc_start()
{
    mirisdr_write_reg(0x08, 0x6080);
    mirisdr_write_reg(0x05, 0x000c);
    mirisdr_write_reg(0x00, 0x0200);
    mirisdr_write_reg(0x02, 0x4801);
    mirisdr_write_reg(0x08, 0xf380);
}


function mirisdr_adc_stop()
{
    mirisdr_write_reg(0x03, 0x010000);
}


function mirisdr_async_start()
{
    if (!dev.box)
        return;
    if (dev.transfer === MIRISDR_TRANSFER_BULK) {
        dev.box.USB_set_interface_alt_setting(dev.dh, 0, 3);
        dev.box.USB_bulk_transfer_start(dev.dh, 0x81, Box.USB_BulkAsync, 192 * 1024);
        dev.async_status = MIRISDR_ASYNC_RUNNING;
    } else if (dev.transfer === MIRISDR_TRANSFER_ISOC) {
        dev.box.USB_set_interface_alt_setting(dev.dh, 0, 1);
        dev.box.USB_bulk_transfer_start(dev.dh, 0x81, Box.USB_Isochronous, 64);
        dev.async_status = MIRISDR_ASYNC_RUNNING;
    }
}


function mirisdr_async_stop()
{
    if (!dev.box)
        return;
    dev.async_status = MIRISDR_ASYNC_INACTIVE;
    dev.box.USB_bulk_transfer_stop(dev.dh);
    dev.box.USB_set_interface_alt_setting(dev.dh, 0, 0);
}


function mirisdr_streaming_start()
{
    if (!dev.dh)
        return;
    if (!dev.box)
        return;
    dev.box.USB_control_transfer(dev.dh, 0x40, 0x43, 0x0, 0x0, null, 0, CTRL_TIMEOUT);
}


function mirisdr_streaming_stop()
{
    if (!dev.dh)
        return;
    if (!dev.box)
        return;
    dev.box.USB_control_transfer(dev.dh, 0x40, 0x45, 0x0, 0x0, null, 0, CTRL_TIMEOUT);
}


function mirisdr_setup(transfertype)
{
    mirisdr_reset();
    mirisdr_streaming_stop();
    mirisdr_adc_stop();
    dev.freq = DEFAULT_FREQ;
    dev.rate = DEFAULT_RATE;
    dev.gain = DEFAULT_GAIN;
    dev.band = MIRISDR_BAND_VHF;
    dev.gain_reduction_lna = 0;
    dev.gain_reduction_mixer = 0;
    dev.gain_reduction_baseband = 43;
    dev.if_freq = MIRISDR_IF_ZERO;
    dev.format_auto = MIRISDR_FORMAT_AUTO_ON;
    dev.bandwidth = MIRISDR_BW_MAX;
    dev.xtal = MIRISDR_XTAL_24M;
    dev.bias = false;
    dev.hw_flavour = MIRISDR_HW_SDRPLAY;
    dev.transfer = transfertype === "ISOC" ? MIRISDR_TRANSFER_ISOC : MIRISDR_TRANSFER_BULK;
    mirisdr_set_hard();
    mirisdr_set_soft();
    mirisdr_set_gain();
}


function mirisdr_reset()
{
    if (!dev.dh)
        return;
    if (!dev.box)
        return;
    dev.box.USB_reset_device(dev.dh);
}


function mirisdr_set_gain()
{
    let reg1 = 1, reg6 = 6;
    reg1 |= dev.gain_reduction_baseband << 4;
    if (dev.band === MIRISDR_BAND_AM1)
        reg1 |= (dev.gain_reduction_mixbuffer & 0x03) << 10;
    else if (dev.band === MIRISDR_BAND_AM2)
        reg1 |= (dev.gain_reduction_mixbuffer === 0 ? 0x0 : 0x03) << 10;
    else
        reg1 |= 0x0 << 10;
    reg1 |= dev.gain_reduction_mixer << 12;
    if ((dev.band === MIRISDR_BAND_AM1) || (dev.band === MIRISDR_BAND_AM2))
        reg1 |= 0x0 << 13;
    else
        reg1 |= dev.gain_reduction_lna << 13;
    reg1 |= MIRISDR_DC_OFFSET_CALIBRATION_PERIODIC2 << 14;
    reg1 |= MIRISDR_DC_OFFSET_CALIBRATION_SPEEDUP_OFF << 17;
    mirisdr_write_reg(0x09, reg1);
    reg6 |= 0x1f << 4;
    reg6 |= 0x800 << 10;
    mirisdr_write_reg(0x09, reg6);
}


function mirisdr_set_tuner_gain(gain)
{
    dev.gain = gain;

    if (gain >= 43) {
        dev.gain_reduction_lna = 0;
        dev.gain_reduction_mixbuffer = 0;
        dev.gain_reduction_mixer = 0;
        dev.gain_reduction_baseband = 100 - gain;
    } else if (gain >= 19) {
        dev.gain_reduction_lna = 0;
        dev.gain_reduction_mixbuffer = 1;
        dev.gain_reduction_mixer = 1;
        dev.gain_reduction_baseband = 80 - gain;
    } else {
        dev.gain_reduction_lna = 1;
        dev.gain_reduction_mixbuffer = 2;
        dev.gain_reduction_mixer = 1;
        dev.gain_reduction_baseband = 60 - gain;
    }

    mirisdr_set_gain();
}


function mirisdr_set_sample_rate(rate)
{
    dev.rate = rate;
    mirisdr_set_hard();
}


function mirisdr_set_center_freq(freq)
{
    if (!dev.box)
        return;
    dev.freq = freq;

    // Some magic
    let r1, r2;

    if (freq > 1000000000) {
        r1 = 0x12f4;
        r2 = 0x13df;
    } else if (freq > 420000000) {
        r1 = 0x12e4;
        r2 = 0x13df;
    } else if (freq > 380000000) {
        r1 = 0x12f8;
        r2 = 0x13df;
    } else if (freq > 300000000) {
        r1 = 0x12e8;
        r2 = 0x13df;
    } else if (freq > 250000000) {
        r1 = 0x12f0;
        r2 = 0x13df;
    } else if (freq > 120000000) {
        r1 = 0x12f4;
        r2 = 0x13df;
    } else if (freq > 60000000) {
        r1 = 0x12c4;
        r2 = 0x13df;
    } else if (freq > 30000000) {
        r1 = 0x12e3;
        r2 = 0x13dd;
    } else if (freq > 13000000) {
        r1 = 0x12e1;
        r2 = 0x13dd;
    } else if (freq > 3000000) {
        r1 = 0x12e2;
        r2 = 0x13dd;
    } else {
        r1 = 0x12e0;
        r2 = 0x13dd;
    }

    r2 -= (dev.bias ? 0x10 : 0x00);

    dev.box.USB_control_transfer(dev.dh, 0x40, 0x49, 0x0000, 0x0040, null, 0, CTRL_TIMEOUT);
    dev.box.USB_control_transfer(dev.dh, 0x40, 0x49, 0x0100, 0x0040, null, 0, CTRL_TIMEOUT);
    dev.box.USB_control_transfer(dev.dh, 0x40, 0x49, r1, 0x0040, null, 0, CTRL_TIMEOUT);
    dev.box.USB_control_transfer(dev.dh, 0x40, 0x49, r2, 0x0040, null, 0, CTRL_TIMEOUT);

    mirisdr_set_soft();
    mirisdr_set_gain();
}


function mirisdr_set_bandwidth(bw)
{
    dev.bandwidth = MIRISDR_BW_MAX;
    if (bw <= 8000000)
        dev.bandwidth = MIRISDR_BW_8MHZ;
    if (bw <= 7000000)
        dev.bandwidth = MIRISDR_BW_7MHZ;
    if (bw <= 6000000)
        dev.bandwidth = MIRISDR_BW_6MHZ;
    if (bw <= 5000000)
        dev.bandwidth = MIRISDR_BW_5MHZ;
    if (bw <= 1536000)
        dev.bandwidth = MIRISDR_BW_1536KHZ;
    if (bw <= 600000)
        dev.bandwidth = MIRISDR_BW_600KHZ;
    if (bw <= 300000)
        dev.bandwidth = MIRISDR_BW_300KHZ;
    if (bw <= 200000)
        dev.bandwidth = MIRISDR_BW_200KHZ;

    mirisdr_set_soft();
    mirisdr_set_gain();
}


function mirisdr_set_offset_tuning(on)
{
    if (on)
        dev.if_freq = MIRISDR_IF_450KHZ;
    else
        dev.if_freq = MIRISDR_IF_ZERO;

    mirisdr_set_soft();
}


function mirisdr_set_bias(bias)
{
    if (!dev.box)
        return;
    dev.bias = bias;

    let r;
    if (dev.freq > 60000000)
        r = dev.bias ? 0x13cf : 0x13df;
    else
        r = dev.bias ? 0x13cd : 0x13dd;

    dev.box.USB_control_transfer(dev.dh, 0x40, 0x49, r, 0x0040, null, 0, CTRL_TIMEOUT);
}


//============================================= SDRPlay wrapper


function device(usbindex, serialnumber, name)
{
    this.usbindex = usbindex;
    this.serialnumber = serialnumber;
    this.name = name;
}


let dev = {
    devices: [],
    box: null,
    dsp: null,
    name: "",
    decim: 0,
    ppm: 0,

    dh: 0,
    index: "",
    freq: 0,
    rate: 0,
    gain: 0,
    gain_reduction_lna: 0,
    gain_reduction_mixbuffer: 0,
    gain_reduction_mixer: 0,
    gain_reduction_baseband: 0,
    hw_flavour: 0,
    band: 0,
    format_auto: 0,
    format: 0,
    bandwidth: 0,
    if_freq: 0,
    xtal: 0,
    transfer: 0,
    async_status: 0,
    bias: 0,
    reg8: 0
}


export function init(box)
{
    dev.box = box;
    dev.devices.length = 0;
    if (!dev.dsp)
        dev.dsp = box.DSP_create();

    let i, j;
    let hex, pid, vid;
    let list, usbdev, serialnumber;
    let magic = false;

    list = dev.box.USBDevice_list();
    for (i = 0; i < list.length; i++) {
        hex = list[i].split(':');
        vid = parseInt(hex[0], 16);
        pid = parseInt(hex[1], 16);
        for (j = 0; j < mirisdr_devices.length; j++)
            if (mirisdr_devices[j].vid === vid && mirisdr_devices[j].pid === pid) {
                usbdev = dev.box.USBDevice_open(list[i]);
                if (usbdev >= 0) {
                    serialnumber = dev.box.USB_get_string_descriptor_ascii(usbdev, 1);
                    if (!serialnumber) {
                        magic = true;
                        magic_reset(usbdev);
                        dev.box.sleep(1000);
                    }
                    dev.box.USB_close(usbdev);
                }
                break;
            }
    }
    
    if (magic)
        dev.box.sleep(1000);

    dev.devices.length = 0;
    list = dev.box.USBDevice_list();
    for (i = 0; i < list.length; i++) {
        hex = list[i].split(':');
        vid = parseInt(hex[0], 16);
        pid = parseInt(hex[1], 16);
        for (j = 0; j < mirisdr_devices.length; j++)
            if (mirisdr_devices[j].vid === vid && mirisdr_devices[j].pid === pid) {
                usbdev = dev.box.USBDevice_open(list[i]);
                if (usbdev >= 0) {
                    serialnumber = dev.box.USB_get_string_descriptor_ascii(usbdev, 1);
                    if (serialnumber)
                        dev.devices.push(new device(list[i], serialnumber, mirisdr_devices[j].product));
                    dev.box.USB_close(usbdev);
                }
                break;
            }
    }
}


export function list()
{
    let list = [];

    for (let i = 0; i < dev.devices.length; i++)
        list.push(dev.devices[i].serialnumber);

    return list;
}


export function description(serialnumber)
{
    for (let i = 0; i < dev.devices.length; i++)
        if (dev.devices[i].serialnumber === serialnumber)
            return dev.devices[i].name;

    return "";
}


export function fromId(serialnumber)
{
    for (let i = 0; i < dev.devices.length; i++)
        if (dev.devices[i].serialnumber === serialnumber)
            return dev.devices[i].usbindex;

    return "";
}


export function open(serialnumber)
{
    if (!serialnumber)
        return false;

    if (!dev.box)
        return false;

    let usbindex = fromId(serialnumber);
    if (!usbindex)
        return false;

    let usbhandle = dev.box.USBDevice_open(usbindex, 0);
    if (usbhandle < 0)
        return false;

    dev.box.USB_Data.connect(dataWorker);
    dev.box.USB_Error.connect(usbError);

    dev.name = description(serialnumber);
    dev.index = usbindex;
    dev.dh = usbhandle;

    return true;
}


export function close()
{
    if (!dev.box)
        return;

    dev.box.USB_Data.disconnect(dataWorker);
    dev.box.USB_Error.disconnect(usbError);

    dev.box.USB_close(dev.dh);

    dev.dh = -1;
}


export function start(transfertype)
{
    mirisdr_setup(transfertype);

    mirisdr_adc_start();
    mirisdr_streaming_start();
    mirisdr_async_start();
}


export function stop()
{
    mirisdr_async_stop();
    mirisdr_streaming_stop();
    mirisdr_adc_stop();
}


function usbError(id)
{
    if (id === dev.dh)
        error();
}


function dataWorker(id, data)
{
    if (id !== dev.dh)
        return;

    if (!dev.box)
        return;

    dev.box.USB_setBusy(dev.dh, true);

    data = dev.box.DSP_mirics_convert(data, dev.format, dev.rate);

    if (dev.decim === 1)
        deviceData(data);
    else {
        data = dev.box.DSP_filter_c(dev.dsp, data);
        deviceData(dev.box.DSP_resample_c(dev.dsp, data, dev.box.viewSize(data) / dev.decim / 4));
    }

    dev.box.USB_setBusy(dev.dh, false);
}


export function gains()
{
    let list = [];
    let min = 0;
    let max = 100;

    for (let i = 0; i <= 20; i++)
        list.push((min + i * (max - min) / 20) | 0);

    return list;
}


export function setGain(gain)
{
    mirisdr_set_tuner_gain(parseInt(gain));
}


let rateprocessing = false;
let newrate = 0;
export function setSampleRate(rate)
{
    if (!dev.box)
        return;

    rate = parseInt(rate);

    if (rateprocessing) {
        newrate = rate;
        return;
    }

    rateprocessing = true;

    if (rate === 1008000) {
        rate = 2016000;
        dev.decim = 2;
    } else if (rate === 756000) {
        rate = 3024000;
        dev.decim = 4;
    } else if (rate === 504000) {
        rate = 2016000;
        dev.decim = 4;
    } else if (rate === 252000) {
        rate = 2016000;
        dev.decim = 8;
    } else if (rate === 126000) {
        rate = 2016000;
        dev.decim = 16;
    } else if (rate === 63000) {
        rate = 2016000;
        dev.decim = 32;
    } else
        dev.decim = 1;

    mirisdr_set_sample_rate(parseInt(rate));

    let div = 1;
    switch (dev.format) {
    case MIRISDR_FORMAT_252_S16:
        div = 256 / 252;
        break;
    case MIRISDR_FORMAT_336_S16:
        div = 256 / 336;
        break;
    case MIRISDR_FORMAT_384_S16:
        div = 256 / 384;
        break;
    case MIRISDR_FORMAT_504_S16:
    case MIRISDR_FORMAT_504_S8:
        div = 256 / 504;
        break;
    }

    let buflen = 1024 * Math.trunc(rate * div * 4 / dev.box.param("system.refreshrate") / 1024);
    dev.box.USB_bulk_transfer_setBufLen(dev.dh, buflen);
    dev.box.DSP_setFilterParams(dev.dsp, 20000, 0, 10000 / dev.decim, 10, Box.FT_PASSBAND);

    rateprocessing = false;

    if (newrate !== 0) {
        rate = newrate;
        newrate = 0;
        setSampleRate(rate);
    }
}


export function setFrequencyCorrection(ppm)
{
    dev.ppm = ppm;
    mirisdr_set_center_freq(parseInt(dev.freq));
}


export function setCenterFrequency(freq)
{
    mirisdr_set_center_freq(parseInt(freq));
}


export function setBandwidth(bw)
{
    mirisdr_set_bandwidth(parseInt(bw));
}


export function setBiasT(biast)
{
    mirisdr_set_bias(biast);
}


function magic_reset(dh)
{
    let magic1 = new Uint8Array([
                                    0x02, 0x00, 0x21, 0x02, 0x03, 0x58, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x02,	0x03, 0x95, 0xcc, 0xcc,
                                    0xcc, 0xcc, 0xcc, 0x02, 0x03, 0x96, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x02,	0x12, 0x70, 0x02, 0x00,
                                    0x80, 0x75, 0x81, 0x3e, 0x12, 0x16, 0xdd, 0xe5, 0x82, 0x60, 0x03, 0x02,	0x00, 0x1e, 0x79, 0xe2,
                                    0xe9, 0x44, 0x00, 0x60, 0x1b, 0x7a, 0x01, 0x90, 0x16, 0xe1, 0x78, 0x1b,	0x75, 0xa0, 0x18, 0xe4,
                                    0x93, 0xf2, 0xa3, 0x08, 0xb8, 0x00, 0x02, 0x05, 0xa0, 0xd9, 0xf4, 0xda,	0xf2, 0x75, 0xa0, 0xff,
                                    0xe4, 0x78, 0xff, 0xf6, 0xd8, 0xfd, 0x78, 0x00, 0xe8, 0x44, 0x00, 0x60,	0x0a, 0x79, 0x00, 0x75,
                                    0xa0, 0x18, 0xe4, 0xf3, 0x09, 0xd8, 0xfc, 0x78, 0x1b, 0xe8, 0x44, 0x00,	0x60, 0x0c, 0x79, 0x01,
                                    0x90, 0x18, 0x00, 0xe4, 0xf0, 0xa3, 0xd8, 0xfc, 0xd9, 0xfa, 0x75, 0x2c,	0x00, 0x02, 0x00, 0x1e,
                                    0x90, 0xc0, 0x00, 0x74, 0x05, 0xf0, 0x74, 0x0c, 0xa3, 0xf0, 0xe4, 0xa3,	0xf0, 0xa3, 0xf0, 0x75,
                                    0x31, 0x90, 0x75, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x00, 0x00, 0x15, 0x31, 0x74, 0xff, 0xb5, 0x31, 0x02, 0x15,	0x32, 0xe5, 0x31, 0x45,
                                    0x32, 0x70, 0xe2, 0x75, 0x31, 0x90, 0x75, 0x32, 0x01, 0x75, 0x80, 0xff,	0x75, 0xa0, 0xff, 0xc2,
                                    0x81, 0x90, 0x40, 0x0e, 0xe4, 0xf0, 0x90, 0xc0, 0x18, 0xe0, 0xff, 0x53,	0x07, 0x04, 0x90, 0x18,
                                    0xe2, 0xef, 0xf0, 0x90, 0x18, 0xf6, 0x74, 0x08, 0xf0, 0xc4, 0xa3, 0xf0,	0x74, 0x62, 0xa3, 0xf0,
                                    0xe4, 0xa3, 0xf0, 0x90, 0xc0, 0x00, 0x74, 0x08, 0xf0, 0xc4, 0xa3, 0xf0,	0x74, 0x62, 0xa3, 0xf0,
                                    0xe4, 0xa3, 0xf0, 0x90, 0x18, 0x10, 0xef, 0xf0, 0x90, 0x00, 0x00, 0x12,	0x13, 0xff, 0xaf, 0x82,
                                    0x90, 0x18, 0xe3, 0xef, 0xf0, 0xbf, 0xb4, 0x02, 0x80, 0x03, 0x02, 0x01,	0xb5, 0x74, 0x08, 0x24,
                                    0x1b, 0xf5, 0x33, 0xe4, 0x34, 0x18, 0xf5, 0x34, 0x90, 0x18, 0x0f, 0x74,	0x01, 0xf0, 0xad, 0x33,
                                    0xae, 0x34, 0x90, 0x18, 0x0f, 0xe0, 0xfc, 0x7b, 0x00, 0x90, 0x18, 0xe2,	0xe0, 0x90, 0x18, 0x10,
                                    0xf0, 0x8c, 0x82, 0x8b, 0x83, 0xc0, 0x06, 0xc0, 0x05, 0x12, 0x13, 0xff,	0xac, 0x82, 0xd0, 0x05,
                                    0xd0, 0x06, 0x8d, 0x82, 0x8e, 0x83, 0xec, 0xf0, 0x05, 0x33, 0xe4, 0xb5,	0x33, 0x02, 0x05, 0x34,
                                    0x90, 0x18, 0x0f, 0xe0, 0x24, 0x01, 0xf0, 0xe0, 0xfe, 0xbe, 0x05, 0x00,	0x40, 0xc0, 0x74, 0x02,
                                    0x24, 0x8f, 0xf5, 0x33, 0xe4, 0x34, 0x18, 0xf5, 0x34, 0x90, 0x18, 0x0f,	0x74, 0x07, 0xf0, 0xad,
                                    0x33, 0xae, 0x34, 0x90, 0x18, 0x0f, 0xe0, 0xfc, 0x7b, 0x00, 0x90, 0x18,	0xe2, 0xe0, 0x90, 0x18,
                                    0x10, 0xf0, 0x8c, 0x82, 0x8b, 0x83, 0xc0, 0x06, 0xc0, 0x05, 0x12, 0x13,	0xff, 0xac, 0x82, 0xd0,
                                    0x05, 0xd0, 0x06, 0x8d, 0x82, 0x8e, 0x83, 0xec, 0xf0, 0x74, 0x02, 0x25,	0x33, 0xf5, 0x33, 0xe4,
                                    0x35, 0x34, 0xf5, 0x34, 0x90, 0x18, 0x0f, 0xe0, 0x24, 0x01, 0xf0, 0xe0,	0xfe, 0xbe, 0x11, 0x00,
                                    0x40, 0xbd, 0x02, 0x03, 0x2c, 0xbf, 0xd2, 0x02, 0x80, 0x03, 0x02, 0x03,	0x2c, 0x90, 0x18, 0xe5,
                                    0x74, 0x01, 0xf0, 0xe4, 0xa3, 0xf0, 0x90, 0x18, 0xe5, 0xe0, 0xfe, 0xa3,	0xe0, 0xff, 0x90, 0x18,
                                    0xe5, 0x74, 0x01, 0x2e, 0xf0, 0xe4, 0x3f, 0xa3, 0xf0, 0x90, 0x18, 0xe2,	0xe0, 0x90, 0x18, 0x10,
                                    0xf0, 0x8e, 0x82, 0x8f, 0x83, 0x12, 0x13, 0xff, 0xae, 0x82, 0x7f, 0x00,	0x90, 0x18, 0xe7, 0xef,
                                    0xf0, 0xee, 0xa3, 0xf0, 0x90, 0x18, 0xe5, 0xe0, 0xfe, 0xa3, 0xe0, 0xff,	0x90, 0x18, 0xe5, 0x74,
                                    0x01, 0x2e, 0xf0, 0xe4, 0x3f, 0xa3, 0xf0, 0x90, 0x18, 0xe2, 0xe0, 0x90,	0x18, 0x10, 0xf0, 0x8e,
                                    0x82, 0x8f, 0x83, 0x12, 0x13, 0xff, 0xaf, 0x82, 0x90, 0x18, 0xe7, 0xe0,	0xfd, 0xa3, 0xe0, 0xfe,
                                    0x7c, 0x00, 0x90, 0x18, 0xe7, 0xef, 0x4d, 0xf0, 0xec, 0x4e, 0xa3, 0xf0,	0x90, 0x18, 0xe7, 0xe0,
                                    0xf5, 0xf0, 0xa3, 0xe0, 0x45, 0xf0, 0x70, 0x03, 0x02, 0x03, 0x17, 0x90,	0x18, 0xe5, 0xe0, 0xfe,
                                    0xa3, 0xe0, 0xff, 0x90, 0x18, 0xe5, 0x74, 0x01, 0x2e, 0xf0, 0xe4, 0x3f,	0xa3, 0xf0, 0x90, 0x18,
                                    0xe2, 0xe0, 0x90, 0x18, 0x10, 0xf0, 0x8e, 0x82, 0x8f, 0x83, 0x12, 0x13,	0xff, 0xae, 0x82, 0x7f,
                                    0x00, 0x90, 0x18, 0xe9, 0xef, 0xf0, 0xee, 0xa3, 0xf0, 0x90, 0x18, 0xe5,	0xe0, 0xfe, 0xa3, 0xe0,
                                    0xff, 0x90, 0x18, 0xe5, 0x74, 0x01, 0x2e, 0xf0, 0xe4, 0x3f, 0xa3, 0xf0,	0x90, 0x18, 0xe2, 0xe0,
                                    0x90, 0x18, 0x10, 0xf0, 0x8e, 0x82, 0x8f, 0x83, 0x12, 0x13, 0xff, 0xaf,	0x82, 0x90, 0x18, 0xe9,
                                    0xe0, 0xfd, 0xa3, 0xe0, 0xfe, 0x7c, 0x00, 0x90, 0x18, 0xe9, 0xef, 0x4d,	0xf0, 0xec, 0x4e, 0xa3,
                                    0xf0, 0x90, 0x18, 0xe9, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x8e, 0x35, 0x8f,	0x36, 0x90, 0x18, 0x0d,
                                    0xe4, 0xf0, 0xa3, 0xf0, 0x90, 0x18, 0x0d, 0xe0, 0xfe, 0xa3, 0xe0, 0xff,	0x90, 0x18, 0xe7, 0xe0,
                                    0xfc, 0xa3, 0xe0, 0xfd, 0xc3, 0xee, 0x9c, 0xef, 0x9d, 0x50, 0x4c, 0xae,	0x35, 0xaf, 0x36, 0x90,
                                    0x18, 0xe5, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0x90, 0x18, 0xe5, 0x74, 0x01,	0x2c, 0xf0, 0xe4, 0x3d,
                                    0xa3, 0xf0, 0x90, 0x18, 0xe2, 0xe0, 0x90, 0x18, 0x10, 0xf0, 0x8c, 0x82,	0x8d, 0x83, 0xc0, 0x07,
                                    0xc0, 0x06, 0x12, 0x13, 0xff, 0xad, 0x82, 0xd0, 0x06, 0xd0, 0x07, 0x8e,	0x82, 0x8f, 0x83, 0xed,
                                    0xf0, 0x05, 0x35, 0xe4, 0xb5, 0x35, 0x02, 0x05, 0x36, 0x90, 0x18, 0x0d,	0xe0, 0x24, 0x01, 0xf0,
                                    0xa3, 0xe0, 0x34, 0x00, 0xf0, 0x80, 0x9d, 0x90, 0x18, 0xe7, 0xe0, 0xf5,	0xf0, 0xa3, 0xe0, 0x45,
                                    0xf0, 0x60, 0x03, 0x02, 0x01, 0xc6, 0x75, 0xc4, 0x01, 0x75, 0xc5, 0x01,	0x90, 0xc0, 0x00, 0x74,
                                    0x0b, 0xf0, 0xe4, 0xa3, 0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0xd2, 0x8a, 0xc2,	0x8b, 0xc2, 0xba, 0xd2,
                                    0xaa, 0xc2, 0xbb, 0xd2, 0xab, 0xd2, 0xaf, 0x90, 0x40, 0x0b, 0x74, 0x07,	0xf0, 0x90, 0x40, 0x01,
                                    0x74, 0x60, 0xf0, 0x75, 0x87, 0x01, 0x80, 0xfb, 0xc0, 0xe0, 0xc0, 0x82,	0xc0, 0x83, 0xc0, 0xd0,
                                    0x75, 0xd0, 0x08, 0x78, 0x0e, 0x86, 0x2c, 0x90, 0x40, 0x0e, 0x74, 0x01,	0xf0, 0x90, 0x40, 0x12,
                                    0xf0, 0x90, 0x40, 0x0e, 0xe5, 0x2c, 0xf0, 0x90, 0x18, 0xfc, 0xe0, 0x70,	0x06, 0xc2, 0x80, 0xd2,
                                    0x80, 0x80, 0x09, 0xc2, 0xa8, 0xc2, 0x81, 0x90, 0x18, 0xfc, 0xe4, 0xf0,	0xd0, 0xd0, 0xd0, 0x83,
                                    0xd0, 0x82, 0xd0, 0xe0, 0x32, 0x32, 0xc0, 0x20, 0xc0, 0xe0, 0xc0, 0xf0,	0xc0, 0x82, 0xc0, 0x83,
                                    0xc0, 0x07, 0xc0, 0x06, 0xc0, 0x05, 0xc0, 0x04, 0xc0, 0x03, 0xc0, 0x02,	0xc0, 0x01, 0xc0, 0x00,
                                    0xc0, 0xd0, 0x75, 0xd0, 0x10, 0x90, 0x40, 0x0a, 0xe0, 0xff, 0x90, 0x18,	0x01, 0xf0, 0x90, 0x40,
                                    0x02, 0xe0, 0xfe, 0x90, 0x18, 0x02, 0xf0, 0xef, 0x20, 0xe1, 0x06, 0x90,	0x18, 0xfa, 0xe0, 0x60,
                                    0x47, 0x90, 0x18, 0xfa, 0xe4, 0xf0, 0xc2, 0xaf, 0x90, 0x18, 0xeb, 0xe0,	0xfa, 0xa3, 0xe0, 0xfb,
                                    0xa3, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0x90, 0xc0, 0x00, 0xea, 0xf0, 0xeb,	0xa3, 0xf0, 0xec, 0xa3,
                                    0xf0, 0xed, 0xa3, 0xf0, 0x90, 0x18, 0xf6, 0xe0, 0xfa, 0xa3, 0xe0, 0xfb,	0xa3, 0xe0, 0xfc, 0xa3,
                                    0xe0, 0xfd, 0x90, 0xc0, 0x00, 0xea, 0xf0, 0xeb, 0xa3, 0xf0, 0xec, 0xa3,	0xf0, 0xed, 0xa3, 0xf0,
                                    0xd2, 0xaf, 0x90, 0x40, 0x01, 0x74, 0x60, 0xf0, 0xef, 0x30, 0xe2, 0x27,	0x90, 0x40, 0x06, 0x74,
                                    0x01, 0xf0, 0x90, 0x40, 0x07, 0xe4, 0xf0, 0x90, 0x40, 0x08, 0xf0, 0x90,	0x40, 0x09, 0xf0, 0x90,
                                    0x40, 0x7b, 0xf0, 0x90, 0x40, 0x01, 0xe0, 0xff, 0x30, 0xe4, 0x05, 0x75,	0x2b, 0x00, 0x80, 0x03,
                                    0x75, 0x2b, 0x01, 0xee, 0x20, 0xe0, 0x03, 0x02, 0x11, 0xc6, 0x90, 0x18,	0xf4, 0xe0, 0x60, 0x0e,
                                    0x90, 0x18, 0xf4, 0xe4, 0xf0, 0x90, 0x18, 0x03, 0xe0, 0xff, 0x90, 0x40,	0x00, 0xf0, 0x90, 0x18,
                                    0xdd, 0xe0, 0x60, 0x11, 0x90, 0x18, 0xdd, 0xe4, 0xf0, 0x90, 0x40, 0x01,	0x74, 0x20, 0xf0, 0x75,
                                    0xc5, 0x01, 0x02, 0x12, 0x53, 0x90, 0x18, 0xde, 0xe0, 0x60, 0x62, 0x90,	0x18, 0xde, 0xe4, 0xf0,
                                    0x90, 0x18, 0xe0, 0xe0, 0xff, 0xbf, 0x08, 0x49, 0x75, 0x33, 0xa5, 0x75,	0x34, 0x18, 0xe4, 0xf5,
                                    0x29, 0xf5, 0x2a, 0x74, 0x03, 0x55, 0x29, 0xfe, 0x7f, 0x00, 0x74, 0x20,	0x2e, 0xfe, 0x74, 0x40,
                                    0x3f, 0xff, 0x85, 0x33, 0x82, 0x85, 0x34, 0x83, 0xe0, 0xfd, 0x05, 0x33,	0xe4, 0xb5, 0x33, 0x02,
                                    0x05, 0x34, 0x8e, 0x82, 0x8f, 0x83, 0xed, 0xf0, 0x05, 0x29, 0xe4, 0xb5,	0x29, 0x02, 0x05, 0x2a,
                                    0xc3, 0xe5, 0x29, 0x94, 0x35, 0xe5, 0x2a, 0x94, 0x00, 0x40, 0xc8, 0x90,	0x40, 0x12, 0x74, 0x02,
                                    0xf0, 0x90, 0x18, 0xe0, 0xe0, 0xff, 0x90, 0x40, 0x0f, 0xf0, 0x02, 0x12,	0x53, 0x90, 0x40, 0x12,
                                    0xe0, 0xff, 0x90, 0x18, 0x00, 0xf0, 0xef, 0x30, 0xe2, 0x09, 0x90, 0x40,	0x12, 0xe4, 0xf0, 0x90,
                                    0x18, 0xda, 0xf0, 0x90, 0x18, 0x00, 0xe0, 0xff, 0x30, 0xe4, 0x0b, 0x90,	0x40, 0x12, 0x74, 0x80,
                                    0xf0, 0x90, 0x18, 0xda, 0xe4, 0xf0, 0x90, 0x18, 0xda, 0xe0, 0xff, 0x60,	0x0f, 0xbf, 0x01, 0x03,
                                    0x02, 0x0f, 0x04, 0xbf, 0x02, 0x03, 0x02, 0x10, 0xc3, 0x02, 0x11, 0xc6,	0x90, 0x18, 0x00, 0xe0,
                                    0xff, 0x20, 0xe0, 0x03, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x20, 0xe0, 0xfc,	0xa3, 0xe0, 0xfd, 0xa3,
                                    0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x8c, 0x21, 0x8d, 0x22, 0x8e, 0x23, 0x8f,	0x24, 0x90, 0x40, 0x20,
                                    0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xa3, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x8c,	0x25, 0x8d, 0x26, 0x8e,
                                    0x27, 0x8f, 0x28, 0xaf, 0x22, 0xbf, 0x00, 0x02, 0x80, 0x7b, 0xbf, 0x01,	0x03, 0x02, 0x06, 0x2b,
                                    0xbf, 0x03, 0x03, 0x02, 0x06, 0xa9, 0xbf, 0x05, 0x03, 0x02, 0x07, 0x8f,	0xbf, 0x06, 0x03, 0x02,
                                    0x07, 0xaa, 0xbf, 0x07, 0x03, 0x02, 0x09, 0xac, 0xbf, 0x08, 0x03, 0x02,	0x09, 0xb5, 0xbf, 0x09,
                                    0x03, 0x02, 0x09, 0xcd, 0xbf, 0x0a, 0x03, 0x02, 0x0a, 0x0b, 0xbf, 0x0b,	0x03, 0x02, 0x0a, 0x36,
                                    0xbf, 0x0c, 0x03, 0x02, 0x0b, 0x4a, 0xbf, 0x40, 0x03, 0x02, 0x0b, 0x53,	0xbf, 0x41, 0x03, 0x02,
                                    0x0d, 0x47, 0xbf, 0x42, 0x03, 0x02, 0x0e, 0x86, 0xbf, 0x43, 0x03, 0x02,	0x0e, 0xd1, 0xbf, 0x44,
                                    0x03, 0x02, 0x0b, 0x6b, 0xbf, 0x45, 0x03, 0x02, 0x0e, 0xf1, 0xbf, 0x46,	0x03, 0x02, 0x0b, 0x80,
                                    0xbf, 0x47, 0x03, 0x02, 0x0c, 0x9f, 0xbf, 0x48, 0x03, 0x02, 0x0e, 0xb9,	0xbf, 0x49, 0x03, 0x02,
                                    0x0c, 0xcc, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90,	0x18, 0xf3, 0xe0, 0x60,
                                    0x1a, 0x74, 0x81, 0xb5, 0x25, 0x06, 0xe4, 0xb5, 0x26, 0x02, 0x80, 0x02,	0x80, 0x0d, 0x74, 0x82,
                                    0xb5, 0x21, 0x08, 0x90, 0x40, 0x20, 0x74, 0x01, 0xf0, 0x80, 0x1e, 0x90,	0x18, 0xf5, 0xe0, 0x60,
                                    0x13, 0xe5, 0x25, 0x45, 0x26, 0x70, 0x0d, 0x74, 0x80, 0xb5, 0x21, 0x08,	0x90, 0x40, 0x20, 0x74,
                                    0x02, 0xf0, 0x80, 0x05, 0x90, 0x40, 0x20, 0xe4, 0xf0, 0x90, 0x40, 0x21,	0xe4, 0xf0, 0xf5, 0x27,
                                    0xf5, 0x28, 0x90, 0x40, 0x12, 0x74, 0x0a, 0xf0, 0x02, 0x11, 0xc6, 0xe5,	0x23, 0x45, 0x24, 0x70,
                                    0x41, 0x90, 0x18, 0xdc, 0xe0, 0xff, 0xbf, 0x03, 0x39, 0x74, 0x81, 0xb5,	0x25, 0x06, 0xe4, 0xb5,
                                    0x26, 0x02, 0x80, 0x02, 0x80, 0x23, 0x74, 0x02, 0xb5, 0x21, 0x1e, 0x90,	0x40, 0x0e, 0x74, 0x01,
                                    0xf0, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90, 0x40, 0x0e, 0xe4, 0xf0,	0x90, 0x18, 0xf3, 0xf0,
                                    0x90, 0x40, 0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12,	0x74, 0x60, 0xf0, 0x02,
                                    0x11, 0xc6, 0x74, 0x01, 0xb5, 0x23, 0x06, 0xe4, 0xb5, 0x24, 0x02, 0x80,	0x02, 0x80, 0x21, 0xe5,
                                    0x25, 0x45, 0x26, 0x70, 0x12, 0xe5, 0x21, 0x70, 0x0e, 0x90, 0x18, 0xf5,	0xe4, 0xf0, 0x90, 0x40,
                                    0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12, 0x74, 0x60,	0xf0, 0x02, 0x11, 0xc6,
                                    0x90, 0x40, 0x12, 0x74, 0x60, 0xf0, 0x02, 0x11, 0xc6, 0xae, 0x23, 0xaf,	0x24, 0xbe, 0x02, 0x62,
                                    0xbf, 0x00, 0x5f, 0xad, 0x26, 0x90, 0x18, 0xdf, 0xed, 0xf0, 0x8d, 0x14,	0xbc, 0x01, 0x00, 0x40,
                                    0x48, 0x8d, 0x14, 0xec, 0x24, 0xfb, 0x40, 0x41, 0xbd, 0x01, 0x02, 0x80,	0x0f, 0xbd, 0x02, 0x02,
                                    0x80, 0x12, 0xbd, 0x03, 0x02, 0x80, 0x15, 0xbd, 0x04, 0x20, 0x80, 0x18,	0x90, 0x18, 0xe0, 0x74,
                                    0x02, 0xf0, 0x80, 0x16, 0x90, 0x18, 0xe0, 0x74, 0x04, 0xf0, 0x80, 0x0e,	0x90, 0x18, 0xe0, 0x74,
                                    0x01, 0xf0, 0x80, 0x06, 0x90, 0x18, 0xe0, 0x74, 0x08, 0xf0, 0x90, 0x40,	0x12, 0x74, 0x48, 0xf0,
                                    0x90, 0x18, 0xde, 0x74, 0x01, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12,	0x74, 0x60, 0xf0, 0x02,
                                    0x11, 0xc6, 0xee, 0x4f, 0x70, 0x41, 0x90, 0x18, 0xdc, 0xe0, 0xff, 0xbf,	0x03, 0x39, 0x74, 0x81,
                                    0xb5, 0x25, 0x06, 0xe4, 0xb5, 0x26, 0x02, 0x80, 0x02, 0x80, 0x23, 0x74,	0x02, 0xb5, 0x21, 0x1e,
                                    0x90, 0x40, 0x0e, 0x74, 0x01, 0xf0, 0x90, 0x40, 0x12, 0xc4, 0xf0, 0x90,	0x40, 0x0e, 0xe4, 0xf0,
                                    0x90, 0x18, 0xf3, 0x04, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x48, 0xf0, 0x02,	0x11, 0xc6, 0x90, 0x40,
                                    0x12, 0x74, 0x60, 0xf0, 0x02, 0x11, 0xc6, 0x74, 0x01, 0xb5, 0x23, 0x06,	0xe4, 0xb5, 0x24, 0x02,
                                    0x80, 0x02, 0x80, 0x22, 0xe5, 0x25, 0x45, 0x26, 0x70, 0x13, 0xe5, 0x21,	0x70, 0x0f, 0x90, 0x18,
                                    0xf5, 0x74, 0x01, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x48, 0xf0, 0x02, 0x11,	0xc6, 0x90, 0x40, 0x12,
                                    0x74, 0x60, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12, 0x74, 0x60, 0xf0,	0x02, 0x11, 0xc6, 0x74,
                                    0x7f, 0x55, 0x23, 0xfe, 0x7f, 0x00, 0x90, 0x18, 0x03, 0xee, 0xf0, 0x90,	0x18, 0xf4, 0x74, 0x01,
                                    0xf0, 0x90, 0x40, 0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0xaf, 0x24,	0x90, 0x18, 0x05, 0xef,
                                    0xf0, 0xae, 0x23, 0x90, 0x18, 0x06, 0xee, 0xf0, 0xbf, 0x01, 0x02, 0x80,	0x18, 0xbf, 0x02, 0x02,
                                    0x80, 0x2c, 0xbf, 0x03, 0x03, 0x02, 0x08, 0x89, 0xbf, 0x06, 0x02, 0x80,	0x63, 0xbf, 0x07, 0x02,
                                    0x80, 0x77, 0x02, 0x08, 0xcb, 0x75, 0x33, 0x1b, 0x75, 0x34, 0x18, 0x90,	0x18, 0x1b, 0xe0, 0xfd,
                                    0xa3, 0xe0, 0xff, 0x90, 0x18, 0x07, 0xed, 0xf0, 0xe4, 0xa3, 0xf0, 0x02,	0x08, 0xd1, 0xe5, 0x2b,
                                    0x70, 0x1f, 0x75, 0x33, 0x37, 0x75, 0x34, 0x18, 0x90, 0x18, 0x38, 0x74,	0x02, 0xf0, 0x90, 0x18,
                                    0x39, 0xe0, 0xfd, 0xa3, 0xe0, 0xff, 0x90, 0x18, 0x07, 0xed, 0xf0, 0xef,	0xa3, 0xf0, 0x02, 0x08,
                                    0xd1, 0x75, 0x33, 0x79, 0x75, 0x34, 0x18, 0x90, 0x18, 0x7a, 0x74, 0x02,	0xf0, 0x90, 0x18, 0x7b,
                                    0xe0, 0xfd, 0xa3, 0xe0, 0xff, 0x90, 0x18, 0x07, 0xed, 0xf0, 0xef, 0xa3,	0xf0, 0x02, 0x08, 0xd1,
                                    0x75, 0x33, 0x2d, 0x75, 0x34, 0x18, 0x90, 0x18, 0x2d, 0xe0, 0xfd, 0xa3,	0xe0, 0xff, 0x90, 0x18,
                                    0x07, 0xed, 0xf0, 0xe4, 0xa3, 0xf0, 0x02, 0x08, 0xd1, 0xe5, 0x2b, 0x70,	0x1e, 0x75, 0x33, 0x79,
                                    0x75, 0x34, 0x18, 0x90, 0x18, 0x7a, 0x74, 0x07, 0xf0, 0x90, 0x18, 0x7b,	0xe0, 0xfd, 0xa3, 0xe0,
                                    0xff, 0x90, 0x18, 0x07, 0xed, 0xf0, 0xef, 0xa3, 0xf0, 0x80, 0x66, 0x75,	0x33, 0x37, 0x75, 0x34,
                                    0x18, 0x90, 0x18, 0x38, 0x74, 0x07, 0xf0, 0x90, 0x18, 0x39, 0xe0, 0xfd,	0xa3, 0xe0, 0xff, 0x90,
                                    0x18, 0x07, 0xed, 0xf0, 0xef, 0xa3, 0xf0, 0x80, 0x48, 0xbe, 0x00, 0x02,	0x80, 0x05, 0xbe, 0x01,
                                    0x32, 0x80, 0x18, 0x75, 0x33, 0x8b, 0x75, 0x34, 0x18, 0x90, 0x18, 0x8b,	0xe0, 0xfe, 0xa3, 0xe0,
                                    0xff, 0x90, 0x18, 0x07, 0xee, 0xf0, 0xe4, 0xa3, 0xf0, 0x80, 0x26, 0x75,	0x33, 0x8f, 0x75, 0x34,
                                    0x18, 0x90, 0x18, 0x8f, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x90, 0x18, 0x07,	0xee, 0xf0, 0xe4, 0xa3,
                                    0xf0, 0x80, 0x0e, 0x90, 0x18, 0xe1, 0x74, 0x01, 0xf0, 0x80, 0x06, 0x90,	0x18, 0xe1, 0x74, 0x01,
                                    0xf0, 0x90, 0x18, 0xe1, 0xe0, 0x60, 0x03, 0x02, 0x09, 0x9e, 0x90, 0x18,	0x07, 0xe0, 0xfe, 0xa3,
                                    0xe0, 0xff, 0xc3, 0xee, 0x95, 0x27, 0xef, 0x95, 0x28, 0x50, 0x04, 0x8e,	0x27, 0x8f, 0x28, 0x90,
                                    0x40, 0x12, 0x74, 0x40, 0xf0, 0xc3, 0x95, 0x27, 0xe4, 0x95, 0x28, 0x40,	0x48, 0xe4, 0xf5, 0x29,
                                    0xf5, 0x2a, 0xc3, 0xe5, 0x29, 0x95, 0x27, 0xe5, 0x2a, 0x95, 0x28, 0x50,	0x2f, 0x74, 0x03, 0x55,
                                    0x29, 0xfe, 0x7f, 0x00, 0x74, 0x20, 0x2e, 0xfe, 0x74, 0x40, 0x3f, 0xff,	0x85, 0x33, 0x82, 0x85,
                                    0x34, 0x83, 0xe0, 0xfd, 0x05, 0x33, 0xe4, 0xb5, 0x33, 0x02, 0x05, 0x34,	0x8e, 0x82, 0x8f, 0x83,
                                    0xed, 0xf0, 0x05, 0x29, 0xe4, 0xb5, 0x29, 0xca, 0x05, 0x2a, 0x80, 0xc6,	0x90, 0x40, 0x12, 0x74,
                                    0x0a, 0xf0, 0x02, 0x11, 0xc6, 0xe4, 0xf5, 0x29, 0xf5, 0x2a, 0x74, 0x03,	0x55, 0x29, 0xfe, 0x7f,
                                    0x00, 0x74, 0x20, 0x2e, 0xfe, 0x74, 0x40, 0x3f, 0xff, 0x85, 0x33, 0x82,	0x85, 0x34, 0x83, 0xe0,
                                    0xfd, 0x05, 0x33, 0xe4, 0xb5, 0x33, 0x02, 0x05, 0x34, 0x8e, 0x82, 0x8f,	0x83, 0xed, 0xf0, 0x05,
                                    0x29, 0xe4, 0xb5, 0x29, 0x02, 0x05, 0x2a, 0xc3, 0xe5, 0x29, 0x94, 0x40,	0xe5, 0x2a, 0x94, 0x00,
                                    0x40, 0xc8, 0xe5, 0x27, 0x24, 0xc0, 0xfe, 0xe5, 0x28, 0x34, 0xff, 0xff,	0x8e, 0x27, 0x8f, 0x28,
                                    0x90, 0x40, 0x12, 0x74, 0x02, 0xf0, 0x90, 0x18, 0xda, 0x14, 0xf0, 0x02,	0x11, 0xc6, 0x90, 0x40,
                                    0x12, 0x74, 0x60, 0xf0, 0x90, 0x18, 0xe1, 0xe4, 0xf0, 0x02, 0x11, 0xc6,	0x90, 0x40, 0x12, 0x74,
                                    0x60, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90,	0x18, 0xdb, 0xe0, 0xff,
                                    0x90, 0x40, 0x20, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x0a, 0xf0, 0x02, 0x11,	0xc6, 0xae, 0x23, 0xaf,
                                    0x24, 0xc3, 0x74, 0x01, 0x9e, 0xe4, 0x9f, 0x50, 0x09, 0x90, 0x40, 0x12,	0x74, 0x60, 0xf0, 0x02,
                                    0x11, 0xc6, 0x90, 0x18, 0xdb, 0xee, 0xf0, 0x90, 0x18, 0xf3, 0xe0, 0x60,	0x15, 0x90, 0x40, 0x0e,
                                    0x74, 0x01, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90, 0x40, 0x0e,	0xe4, 0xf0, 0x90, 0x18,
                                    0xf3, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0xc3,	0x74, 0x01, 0x95, 0x25,
                                    0xe4, 0x95, 0x26, 0x50, 0x09, 0x90, 0x40, 0x12, 0x74, 0x60, 0xf0, 0x02,	0x11, 0xc6, 0x90, 0x40,
                                    0x12, 0x74, 0x40, 0xf0, 0x90, 0x18, 0xdc, 0xe0, 0xff, 0x90, 0x40, 0x20,	0xf0, 0x90, 0x40, 0x12,
                                    0x74, 0x0a, 0xf0, 0x02, 0x11, 0xc6, 0xc3, 0x74, 0x01, 0x95, 0x25, 0xe4,	0x95, 0x26, 0x50, 0x09,
                                    0x90, 0x40, 0x12, 0x74, 0x60, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x18, 0xf3,	0xe0, 0x60, 0x15, 0x90,
                                    0x40, 0x0e, 0x74, 0x01, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90,	0x40, 0x0e, 0xe4, 0xf0,
                                    0x90, 0x18, 0xf3, 0xf0, 0xe5, 0x2b, 0x60, 0x03, 0x02, 0x0b, 0x17, 0xaf,	0x23, 0x90, 0x18, 0xdc,
                                    0xef, 0xf0, 0xc3, 0x74, 0x03, 0x9f, 0xe4, 0x33, 0xfe, 0x60, 0x09, 0x90,	0x40, 0x12, 0x74, 0x60,
                                    0xf0, 0x02, 0x11, 0xc6, 0xee, 0x60, 0x03, 0x02, 0x0b, 0x0e, 0xef, 0x2f,	0x2f, 0x90, 0x0a, 0x91,
                                    0x73, 0x02, 0x0a, 0x9d, 0x02, 0x0a, 0xb6, 0x02, 0x0a, 0xd4, 0x02, 0x0a,	0xf2, 0x90, 0x40, 0x0e,
                                    0x74, 0x01, 0xf0, 0x90, 0x40, 0x10, 0xe4, 0xf0, 0x90, 0x40, 0x11, 0xf0,	0x90, 0x40, 0x13, 0xf0,
                                    0x90, 0x40, 0x0e, 0xf0, 0x80, 0x58, 0x90, 0x40, 0x0e, 0x74, 0x01, 0xf0,	0x90, 0x40, 0x10, 0xe4,
                                    0xf0, 0x90, 0x40, 0x11, 0x74, 0x14, 0xf0, 0x90, 0x40, 0x13, 0x74, 0x50,	0xf0, 0x90, 0x40, 0x0e,
                                    0xe4, 0xf0, 0x80, 0x3a, 0x90, 0x40, 0x0e, 0x74, 0x01, 0xf0, 0x90, 0x40,	0x10, 0xe4, 0xf0, 0x90,
                                    0x40, 0x11, 0x74, 0x04, 0xf0, 0x90, 0x40, 0x13, 0x74, 0x50, 0xf0, 0x90,	0x40, 0x0e, 0xe4, 0xf0,
                                    0x80, 0x1c, 0x90, 0x40, 0x0e, 0x74, 0x01, 0xf0, 0x90, 0x40, 0x10, 0xe4,	0xf0, 0x90, 0x40, 0x11,
                                    0x74, 0x3a, 0xf0, 0x90, 0x40, 0x13, 0x74, 0x10, 0xf0, 0x90, 0x40, 0x0e,	0xe4, 0xf0, 0x90, 0x40,
                                    0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0xaf, 0x23, 0x90, 0x18, 0xdc,	0xef, 0xf0, 0xef, 0x60,
                                    0x09, 0x90, 0x40, 0x12, 0x74, 0x60, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40,	0x0e, 0x74, 0x01, 0xf0,
                                    0x90, 0x40, 0x10, 0xe4, 0xf0, 0x90, 0x40, 0x11, 0xf0, 0x90, 0x40, 0x13,	0xf0, 0x90, 0x40, 0x0e,
                                    0xf0, 0x90, 0x40, 0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40,	0x12, 0x74, 0x60, 0xf0,
                                    0x02, 0x11, 0xc6, 0x74, 0x01, 0x55, 0x23, 0xfe, 0x7f, 0x00, 0x8e, 0xc4,	0x90, 0x40, 0x12, 0x74,
                                    0x48, 0xf0, 0x90, 0x18, 0xdd, 0x74, 0x01, 0xf0, 0x02, 0x11, 0xc6, 0x85,	0x23, 0x33, 0x85, 0x24,
                                    0x34, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90, 0x18, 0xda, 0x74, 0x02,	0xf0, 0x02, 0x11, 0xc6,
                                    0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90, 0x18, 0xe5, 0xe5, 0x23, 0xf0,	0xe5, 0x24, 0xa3, 0xf0,
                                    0x90, 0xc0, 0x00, 0x74, 0x0b, 0xf0, 0x74, 0x04, 0xa3, 0xf0, 0xe4, 0xa3,	0xf0, 0xa3, 0xf0, 0xc3,
                                    0x74, 0x40, 0x95, 0x27, 0xe4, 0x95, 0x28, 0x40, 0x77, 0xe4, 0xf5, 0x29,	0xf5, 0x2a, 0xc3, 0xe5,
                                    0x29, 0x95, 0x27, 0xe5, 0x2a, 0x95, 0x28, 0x50, 0x51, 0x74, 0x03, 0x55,	0x29, 0xfe, 0x7f, 0x00,
                                    0x74, 0x20, 0x2e, 0xfe, 0x74, 0x40, 0x3f, 0xff, 0x90, 0x18, 0xe5, 0xe0,	0xfc, 0xa3, 0xe0, 0xfd,
                                    0x90, 0x18, 0xe5, 0x74, 0x01, 0x2c, 0xf0, 0xe4, 0x3d, 0xa3, 0xf0, 0x90,	0x18, 0xe2, 0xe0, 0x90,
                                    0x18, 0x10, 0xf0, 0x8c, 0x82, 0x8d, 0x83, 0xc0, 0x17, 0xc0, 0x16, 0x75,	0xd0, 0x00, 0x12, 0x13,
                                    0xff, 0x75, 0xd0, 0x10, 0xad, 0x82, 0xd0, 0x16, 0xd0, 0x17, 0x8e, 0x82,	0x8f, 0x83, 0xed, 0xf0,
                                    0x05, 0x29, 0xe4, 0xb5, 0x29, 0xa8, 0x05, 0x2a, 0x80, 0xa4, 0x90, 0xc0,	0x00, 0x74, 0x0b, 0xf0,
                                    0xe4, 0xa3, 0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x0a,	0xf0, 0x02, 0x11, 0xc6,
                                    0xe4, 0xf5, 0x29, 0xf5, 0x2a, 0x74, 0x03, 0x55, 0x29, 0xfe, 0x7f, 0x00,	0x74, 0x20, 0x2e, 0xfe,
                                    0x74, 0x40, 0x3f, 0xff, 0x90, 0x18, 0xe5, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd,	0x90, 0x18, 0xe5, 0x74,
                                    0x01, 0x2c, 0xf0, 0xe4, 0x3d, 0xa3, 0xf0, 0x90, 0x18, 0xe2, 0xe0, 0x90,	0x18, 0x10, 0xf0, 0x8c,
                                    0x82, 0x8d, 0x83, 0xc0, 0x17, 0xc0, 0x16, 0x75, 0xd0, 0x00, 0x12, 0x13,	0xff, 0x75, 0xd0, 0x10,
                                    0xad, 0x82, 0xd0, 0x16, 0xd0, 0x17, 0x8e, 0x82, 0x8f, 0x83, 0xed, 0xf0,	0x05, 0x29, 0xe4, 0xb5,
                                    0x29, 0x02, 0x05, 0x2a, 0xc3, 0xe5, 0x29, 0x94, 0x40, 0xe5, 0x2a, 0x94,	0x00, 0x40, 0xa6, 0xe5,
                                    0x27, 0x24, 0xc0, 0xfe, 0xe5, 0x28, 0x34, 0xff, 0xff, 0x8e, 0x27, 0x8f,	0x28, 0x90, 0x40, 0x12,
                                    0x74, 0x02, 0xf0, 0x90, 0x18, 0xe4, 0x14, 0xf0, 0x90, 0x18, 0xda, 0xf0,	0x02, 0x11, 0xc6, 0x90,
                                    0x18, 0xe5, 0xe5, 0x23, 0xf0, 0xe5, 0x24, 0xa3, 0xf0, 0x90, 0xc0, 0x00,	0x74, 0x0b, 0xf0, 0x74,
                                    0x04, 0xa3, 0xf0, 0xe4, 0xa3, 0xf0, 0xa3, 0xf0, 0x90, 0x18, 0xe4, 0x04,	0xf0, 0x90, 0x40, 0x12,
                                    0x74, 0x40, 0xf0, 0x90, 0x18, 0xda, 0x74, 0x02, 0xf0, 0x02, 0x11, 0xc6,	0x90, 0x18, 0xf6, 0xe0,
                                    0xfc, 0xa3, 0xe0, 0xfd, 0xa3, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x53, 0x16,	0xf7, 0x90, 0xc0, 0x00,
                                    0xec, 0xf0, 0xed, 0xa3, 0xf0, 0xee, 0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0x90,	0xc0, 0x00, 0x74, 0x0b,
                                    0xf0, 0x74, 0x04, 0xa3, 0xf0, 0xe4, 0xa3, 0xf0, 0xa3, 0xf0, 0xac, 0x23,	0xad, 0x24, 0xae, 0x25,
                                    0xaf, 0x26, 0x8c, 0x82, 0x8d, 0x83, 0x8e, 0xf0, 0xef, 0x75, 0xd0, 0x00,	0x12, 0x16, 0x6d, 0x75,
                                    0xd0, 0x10, 0x90, 0xc0, 0x00, 0x74, 0x0b, 0xf0, 0xe4, 0xa3, 0xf0, 0xa3,	0xf0, 0xa3, 0xf0, 0x90,
                                    0x18, 0xf6, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xa3, 0xe0, 0xfe, 0xa3, 0xe0,	0xff, 0x43, 0x16, 0x08,
                                    0x90, 0xc0, 0x00, 0xec, 0xf0, 0xed, 0xa3, 0xf0, 0xee, 0xa3, 0xf0, 0xef,	0xa3, 0xf0, 0x90, 0x40,
                                    0x12, 0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0xaf, 0x23, 0x53, 0x17, 0x1f,	0xbf, 0x09, 0x02, 0x80,
                                    0x03, 0x02, 0x0d, 0xd4, 0x7e, 0x00, 0x74, 0x0f, 0x55, 0x24, 0xff, 0xbe,	0x00, 0x18, 0xbf, 0x03,
                                    0x15, 0x90, 0x18, 0xef, 0xe5, 0x23, 0xf0, 0xe5, 0x24, 0xa3, 0xf0, 0xe5,	0x25, 0xa3, 0xf0, 0xe5,
                                    0x26, 0xa3, 0xf0, 0x02, 0x0e, 0x7d, 0x90, 0xc0, 0x14, 0xe0, 0xff, 0x30,	0xe0, 0xf8, 0xc2, 0xaf,
                                    0x7e, 0x00, 0x74, 0x0f, 0x55, 0x24, 0xff, 0xbe, 0x00, 0x2f, 0xbf, 0x02,	0x2c, 0x90, 0x18, 0xef,
                                    0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xa3, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x90,	0xc0, 0x00, 0xec, 0xf0,
                                    0xed, 0xa3, 0xf0, 0xee, 0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0x90, 0xc0, 0x14,	0xe0, 0xff, 0x30, 0xe5,
                                    0xf8, 0x90, 0xc0, 0x14, 0xe0, 0xff, 0x30, 0xe0, 0xf8, 0xac, 0x23, 0xad,	0x24, 0xae, 0x25, 0xaf,
                                    0x26, 0x90, 0xc0, 0x00, 0xec, 0xf0, 0xed, 0xa3, 0xf0, 0xee, 0xa3, 0xf0,	0xef, 0xa3, 0xf0, 0xd2,
                                    0xaf, 0x02, 0x0e, 0x7d, 0xaf, 0x23, 0x53, 0x17, 0x1f, 0xbf, 0x05, 0x1d,	0xc2, 0xaf, 0xac, 0x23,
                                    0xad, 0x24, 0xae, 0x25, 0xaf, 0x26, 0x43, 0x15, 0x08, 0x90, 0xc0, 0x00,	0xec, 0xf0, 0xed, 0xa3,
                                    0xf0, 0xee, 0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0x80, 0x18, 0xc2, 0xaf, 0xac,	0x23, 0xad, 0x24, 0xae,
                                    0x25, 0xaf, 0x26, 0x90, 0xc0, 0x00, 0xec, 0xf0, 0xed, 0xa3, 0xf0, 0xee,	0xa3, 0xf0, 0xef, 0xa3,
                                    0xf0, 0xd2, 0xaf, 0xaf, 0x23, 0x53, 0x17, 0x1f, 0xbf, 0x03, 0x1a, 0xac,	0x23, 0xad, 0x24, 0xae,
                                    0x25, 0xaf, 0x26, 0x90, 0x18, 0xeb, 0x74, 0x1f, 0x5c, 0xf0, 0xed, 0xa3,	0xf0, 0xee, 0xa3, 0xf0,
                                    0xef, 0xa3, 0xf0, 0x80, 0x48, 0xaf, 0x23, 0x53, 0x17, 0x1f, 0xbf, 0x08,	0x1a, 0xac, 0x23, 0xad,
                                    0x24, 0xae, 0x25, 0xaf, 0x26, 0x90, 0x18, 0xf6, 0x74, 0x1f, 0x5c, 0xf0,	0xed, 0xa3, 0xf0, 0xee,
                                    0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0x80, 0x26, 0x74, 0x1f, 0x55, 0x23, 0xfe,	0x74, 0x30, 0x55, 0x24,
                                    0xff, 0xbe, 0x07, 0x19, 0xbf, 0x20, 0x16, 0xc2, 0x82, 0x90, 0xe3, 0xff,	0x74, 0xfa, 0xf0, 0x90,
                                    0xe7, 0xff, 0xf0, 0x90, 0xeb, 0xff, 0xf0, 0x90, 0xef, 0xff, 0xf0, 0xd2,	0x82, 0x90, 0x40, 0x12,
                                    0x74, 0x48, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12, 0x74, 0x40, 0xf0,	0xae, 0x25, 0x74, 0xc0,
                                    0x25, 0x26, 0xff, 0x8e, 0x82, 0x8f, 0x83, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd,	0xa3, 0xe0, 0xfe, 0xa3,
                                    0xe0, 0xff, 0x90, 0x40, 0x20, 0xec, 0xf0, 0xed, 0xa3, 0xf0, 0xee, 0xa3,	0xf0, 0xef, 0xa3, 0xf0,
                                    0x90, 0x40, 0x12, 0x74, 0x0a, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x40, 0x12,	0x74, 0x40, 0xf0, 0x90,
                                    0x40, 0x00, 0xe0, 0xff, 0x90, 0x40, 0x20, 0xf0, 0x90, 0x40, 0x12, 0x74,	0x0a, 0xf0, 0x02, 0x11,
                                    0xc6, 0xe5, 0x2b, 0x70, 0x13, 0xd2, 0x88, 0xc2, 0x89, 0xd2, 0xb8, 0xd2,	0xa8, 0x90, 0x18, 0xfc,
                                    0xe4, 0xf0, 0xd2, 0x81, 0xc2, 0x80, 0xd2, 0x80, 0x90, 0x40, 0x12, 0x74,	0x48, 0xf0, 0x02, 0x11,
                                    0xc6, 0xe5, 0x2b, 0x70, 0x06, 0x90, 0x18, 0xfc, 0x74, 0x01, 0xf0, 0x90,	0x40, 0x12, 0x74, 0x48,
                                    0xf0, 0x02, 0x11, 0xc6, 0x90, 0x18, 0x00, 0xe0, 0xff, 0x30, 0xe1, 0x03,	0x02, 0x11, 0xc6, 0xc3,
                                    0x74, 0x40, 0x95, 0x27, 0xe4, 0x95, 0x28, 0x50, 0x03, 0x02, 0x0f, 0xe9,	0x90, 0x18, 0xe4, 0xe0,
                                    0x70, 0x41, 0xf5, 0x29, 0xf5, 0x2a, 0xc3, 0xe5, 0x29, 0x95, 0x27, 0xe5,	0x2a, 0x95, 0x28, 0x40,
                                    0x03, 0x02, 0x0f, 0xd6, 0x74, 0x03, 0x55, 0x29, 0xfe, 0x7f, 0x00, 0x74,	0x20, 0x2e, 0xfe, 0x74,
                                    0x40, 0x3f, 0xff, 0x85, 0x33, 0x82, 0x85, 0x34, 0x83, 0xe0, 0xfd, 0x05,	0x33, 0xe4, 0xb5, 0x33,
                                    0x02, 0x05, 0x34, 0x8e, 0x82, 0x8f, 0x83, 0xed, 0xf0, 0x05, 0x29, 0xe4,	0xb5, 0x29, 0xc7, 0x05,
                                    0x2a, 0x80, 0xc3, 0xe4, 0xf5, 0x29, 0xf5, 0x2a, 0xc3, 0xe5, 0x29, 0x95,	0x27, 0xe5, 0x2a, 0x95,
                                    0x28, 0x50, 0x51, 0x74, 0x03, 0x55, 0x29, 0xfe, 0x7f, 0x00, 0x74, 0x20,	0x2e, 0xfe, 0x74, 0x40,
                                    0x3f, 0xff, 0x90, 0x18, 0xe5, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0x90, 0x18,	0xe5, 0x74, 0x01, 0x2c,
                                    0xf0, 0xe4, 0x3d, 0xa3, 0xf0, 0x90, 0x18, 0xe2, 0xe0, 0x90, 0x18, 0x10,	0xf0, 0x8c, 0x82, 0x8d,
                                    0x83, 0xc0, 0x17, 0xc0, 0x16, 0x75, 0xd0, 0x00, 0x12, 0x13, 0xff, 0x75,	0xd0, 0x10, 0xad, 0x82,
                                    0xd0, 0x16, 0xd0, 0x17, 0x8e, 0x82, 0x8f, 0x83, 0xed, 0xf0, 0x05, 0x29,	0xe4, 0xb5, 0x29, 0xa8,
                                    0x05, 0x2a, 0x80, 0xa4, 0x90, 0x18, 0xe4, 0xe4, 0xf0, 0x90, 0xc0, 0x00,	0x74, 0x0b, 0xf0, 0xe4,
                                    0xa3, 0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0xe4, 0xf5, 0x27, 0xf5, 0x28, 0x90,	0x40, 0x12, 0x74, 0x0a,
                                    0xf0, 0x90, 0x18, 0xda, 0xe4, 0xf0, 0x02, 0x11, 0xc6, 0x90, 0x18, 0xe4,	0xe0, 0x70, 0x3f, 0xf5,
                                    0x29, 0xf5, 0x2a, 0x74, 0x03, 0x55, 0x29, 0xfe, 0x7f, 0x00, 0x74, 0x20,	0x2e, 0xfe, 0x74, 0x40
                                ]);

    let magic2 = new Uint8Array([
                                    0x3f, 0xff, 0x85, 0x33, 0x82, 0x85, 0x34, 0x83,	0xe0, 0xfd, 0x05, 0x33,	0xe4, 0xb5, 0x33, 0x02,
                                    0x05, 0x34, 0x8e, 0x82, 0x8f, 0x83, 0xed, 0xf0,	0x05, 0x29, 0xe4, 0xb5,	0x29, 0x02, 0x05, 0x2a,
                                    0xc3, 0xe5, 0x29, 0x94, 0x40, 0xe5, 0x2a, 0x94,	0x00, 0x40, 0xc8, 0x02,	0x10, 0xac, 0xe4, 0xf5,
                                    0x29, 0xf5, 0x2a, 0x74, 0x03, 0x55, 0x29, 0xfe,	0x7f, 0x00, 0x74, 0x20,	0x2e, 0xfe, 0x74, 0x40,
                                    0x3f, 0xff, 0x90, 0x18, 0xe5, 0xe0, 0xfc, 0xa3,	0xe0, 0xfd, 0x90, 0x18,	0xe5, 0x74, 0x01, 0x2c,
                                    0xf0, 0xe4, 0x3d, 0xa3, 0xf0, 0x90, 0x18, 0xe2,	0xe0, 0x90, 0x18, 0x10,	0xf0, 0x8c, 0x82, 0x8d,
                                    0x83, 0xc0, 0x17, 0xc0, 0x16, 0x75, 0xd0, 0x00,	0x12, 0x13, 0xff, 0x75,	0xd0, 0x10, 0xad, 0x82,
                                    0xd0, 0x16, 0xd0, 0x17, 0x8e, 0x82, 0x8f, 0x83,	0xed, 0xf0, 0x05, 0x29,	0xe4, 0xb5, 0x29, 0x02,
                                    0x05, 0x2a, 0xc3, 0xe5, 0x29, 0x94, 0x40, 0xe5,	0x2a, 0x94, 0x00, 0x40,	0xa6, 0x74, 0x40, 0xb5,
                                    0x27, 0x06, 0xe4, 0xb5, 0x28, 0x02, 0x80, 0x02,	0x80, 0x12, 0x90, 0x18,	0xe4, 0xe4, 0xf0, 0x90,
                                    0xc0, 0x00, 0x74, 0x0b, 0xf0, 0xe4, 0xa3, 0xf0,	0xa3, 0xf0, 0xa3, 0xf0,	0xe5, 0x27, 0x24, 0xc0,
                                    0xfe, 0xe5, 0x28, 0x34, 0xff, 0xff, 0x8e, 0x27,	0x8f, 0x28, 0x90, 0x40,	0x12, 0x74, 0x02, 0xf0,
                                    0x02, 0x11, 0xc6, 0x90, 0x18, 0x00, 0xe0, 0xff,	0x20, 0xe0, 0x03, 0x02,	0x11, 0xc6, 0x90, 0x40,
                                    0x18, 0xe0, 0xff, 0x90, 0x18, 0x04, 0xf0, 0x90,	0x18, 0xe4, 0xe0, 0x70,	0x44, 0xf5, 0x29, 0xf5,
                                    0x2a, 0x8f, 0x15, 0x7e, 0x00, 0xc3, 0xe5, 0x29,	0x9d, 0xe5, 0x2a, 0x9e,	0x40, 0x03, 0x02, 0x11,
                                    0x88, 0xad, 0x33, 0xae, 0x34, 0x74, 0x03, 0x55,	0x29, 0xfb, 0x7c, 0x00,	0x74, 0x20, 0x2b, 0xfb,
                                    0x74, 0x40, 0x3c, 0xfc, 0x8b, 0x82, 0x8c, 0x83,	0xe0, 0xfc, 0x8d, 0x82,	0x8e, 0x83, 0xf0, 0x05,
                                    0x33, 0xe4, 0xb5, 0x33, 0x02, 0x05, 0x34, 0x05,	0x29, 0xe4, 0xb5, 0x29,	0xc4, 0x05, 0x2a, 0x80,
                                    0xc0, 0xe4, 0xf5, 0x29, 0xf5, 0x2a, 0x90, 0x18,	0x04, 0xe0, 0xfe, 0x7d,	0x00, 0xc3, 0xe5, 0x29,
                                    0x9e, 0xe5, 0x2a, 0x9d, 0x50, 0x52, 0x90, 0x18,	0xe5, 0xe0, 0xfd, 0xa3,	0xe0, 0xfe, 0x90, 0x18,
                                    0xe5, 0x74, 0x01, 0x2d, 0xf0, 0xe4, 0x3e, 0xa3,	0xf0, 0x90, 0x18, 0xe2,	0xe0, 0xfc, 0x74, 0x03,
                                    0x55, 0x29, 0xfa, 0x7b, 0x00, 0x74, 0x20, 0x2a,	0xfa, 0x74, 0x40, 0x3b,	0xfb, 0x8a, 0x82, 0x8b,
                                    0x83, 0xe0, 0xfb, 0x90, 0x18, 0x13, 0xec, 0xf0,	0x90, 0x18, 0x14, 0xeb,	0xf0, 0x8d, 0x82, 0x8e,
                                    0x83, 0xc0, 0x17, 0x75, 0xd0, 0x00, 0x12, 0x14,	0xe3, 0x75, 0xd0, 0x10,	0xd0, 0x17, 0x05, 0x29,
                                    0xe4, 0xb5, 0x29, 0xa2, 0x05, 0x2a, 0x80, 0x9e,	0x7e, 0x00, 0xe5, 0x27,	0xc3, 0x9f, 0xff, 0xe5,
                                    0x28, 0x9e, 0xfe, 0x8f, 0x27, 0x8e, 0x28, 0xef,	0x4e, 0x70, 0x25, 0x90,	0x18, 0xe4, 0xe0, 0x60,
                                    0x12, 0x90, 0x18, 0xe4, 0xe4, 0xf0, 0x90, 0xc0,	0x00, 0x74, 0x0b, 0xf0,	0xe4, 0xa3, 0xf0, 0xa3,
                                    0xf0, 0xa3, 0xf0, 0x90, 0x40, 0x12, 0x74, 0x48,	0xf0, 0x90, 0x18, 0xda,	0xe4, 0xf0, 0x80, 0x06,
                                    0x90, 0x40, 0x12, 0x74, 0x40, 0xf0, 0x90, 0x18,	0x01, 0xe0, 0xff, 0x30,	0xe0, 0x75, 0xc2, 0xaf,
                                    0x90, 0x18, 0xf5, 0xe0, 0x60, 0x21, 0x90, 0x18,	0xf6, 0xe0, 0xfc, 0xa3,	0xe0, 0xfd, 0xa3, 0xe0,
                                    0xfe, 0xa3, 0xe0, 0xff, 0x43, 0x16, 0x04, 0x90,	0xc0, 0x00, 0xec, 0xf0,	0xed, 0xa3, 0xf0, 0xee,
                                    0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0x80, 0x1f, 0x90,	0x18, 0xf6, 0xe0, 0xfc,	0xa3, 0xe0, 0xfd, 0xa3,
                                    0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x53, 0x16, 0xfb,	0x90, 0xc0, 0x00, 0xec,	0xf0, 0xed, 0xa3, 0xf0,
                                    0xee, 0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0x90, 0x18,	0xeb, 0xe0, 0xfc, 0xa3,	0xe0, 0xfd, 0xa3, 0xe0,
                                    0xfe, 0xa3, 0xe0, 0xff, 0x53, 0x15, 0xfc, 0x90,	0xc0, 0x00, 0xec, 0xf0,	0xed, 0xa3, 0xf0, 0xee,
                                    0xa3, 0xf0, 0xef, 0xa3, 0xf0, 0xd2, 0xaf, 0x90,	0x18, 0xfa, 0x74, 0x01,	0xf0, 0x90, 0x40, 0x01,
                                    0x74, 0x61, 0xf0, 0x90, 0x40, 0x02, 0xe0, 0xff,	0x90, 0x18, 0x02, 0xf0,	0xef, 0x30, 0xe0, 0x03,
                                    0x02, 0x04, 0x4a, 0xd0, 0xd0, 0xd0, 0x00, 0xd0,	0x01, 0xd0, 0x02, 0xd0,	0x03, 0xd0, 0x04, 0xd0,
                                    0x05, 0xd0, 0x06, 0xd0, 0x07, 0xd0, 0x83, 0xd0,	0x82, 0xd0, 0xf0, 0xd0,	0xe0, 0xd0, 0x20, 0x32,
                                    0xc0, 0xe0, 0xc0, 0xf0, 0xc0, 0x82, 0xc0, 0x83,	0xc0, 0xd0, 0x75, 0xd0,	0x18, 0x90, 0xc0, 0x0c,
                                    0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xa3, 0xe0, 0xfe,	0xa3, 0xe0, 0xff, 0x8c,	0x2d, 0x8d, 0x2e, 0x8e,
                                    0x2f, 0x8f, 0x30, 0x90, 0x18, 0xfb, 0xe0, 0xff,	0x24, 0xfc, 0x50, 0x03,	0x02, 0x13, 0xf4, 0xef,
                                    0x2f, 0x2f, 0x90, 0x12, 0xa6, 0x73, 0x02, 0x12,	0xb2, 0x02, 0x12, 0xe4,	0x02, 0x12, 0xf3, 0x02,
                                    0x13, 0xe0, 0xc2, 0xa8, 0xc2, 0xaa, 0xe5, 0x2d,	0x45, 0x2e, 0x45, 0x2f,	0x45, 0x30, 0x70, 0x09,
                                    0x90, 0x18, 0xfb, 0x74, 0x03, 0xf0, 0x02, 0x13,	0xf4, 0x90, 0x18, 0x09,	0xe5, 0x2d, 0xf0, 0xe5,
                                    0x2e, 0xa3, 0xf0, 0xe5, 0x2f, 0xa3, 0xf0, 0xe5,	0x30, 0xa3, 0xf0, 0x90,	0x18, 0xfb, 0x74, 0x01,
                                    0xf0, 0x02, 0x13, 0xf4, 0x85, 0x2d, 0x35, 0x85,	0x2e, 0x36, 0x90, 0x18,	0xfb, 0x74, 0x02, 0xf0,
                                    0x02, 0x13, 0xf4, 0x90, 0x18, 0x09, 0xe0, 0xfc,	0xa3, 0xe0, 0xfd, 0xa3,	0xe0, 0xfe, 0xa3, 0xe0,
                                    0xff, 0xc3, 0xec, 0x94, 0x03, 0xed, 0x94, 0x00,	0xee, 0x94, 0x00, 0xef,	0x94, 0x00, 0x40, 0x5c,
                                    0xe4, 0xf5, 0x31, 0xf5, 0x32, 0x85, 0x35, 0x82,	0x85, 0x36, 0x83, 0xe5,	0x31, 0x24, 0x2d, 0xf9,
                                    0xe7, 0xff, 0xf0, 0x05, 0x35, 0xe4, 0xb5, 0x35,	0x02, 0x05, 0x36, 0x05,	0x31, 0xe4, 0xb5, 0x31,
                                    0x02, 0x05, 0x32, 0xc3, 0xe5, 0x31, 0x94, 0x03,	0xe5, 0x32, 0x94, 0x00,	0x40, 0xd7, 0x90, 0x18,
                                    0x09, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xa3, 0xe0,	0xfe, 0xa3, 0xe0, 0xff,	0xec, 0x24, 0xfd, 0xfc,
                                    0xed, 0x34, 0xff, 0xfd, 0xee, 0x34, 0xff, 0xfe,	0xef, 0x34, 0xff, 0xff,	0x90, 0x18, 0x09, 0xec,
                                    0xf0, 0xed, 0xa3, 0xf0, 0xee, 0xa3, 0xf0, 0xef,	0xa3, 0xf0, 0x80, 0x59,	0xe4, 0xf5, 0x31, 0xf5,
                                    0x32, 0x90, 0x18, 0x09, 0xe0, 0xf5, 0x37, 0xa3,	0xe0, 0xf5, 0x38, 0xa3,	0xe0, 0xf5, 0x39, 0xa3,
                                    0xe0, 0xf5, 0x3a, 0xaa, 0x31, 0xab, 0x32, 0x7e,	0x00, 0x7f, 0x00, 0xc3,	0xea, 0x95, 0x37, 0xeb,
                                    0x95, 0x38, 0xee, 0x95, 0x39, 0xef, 0x95, 0x3a,	0x50, 0x20, 0x85, 0x35,	0x82, 0x85, 0x36, 0x83,
                                    0xe5, 0x31, 0x24, 0x2d, 0xf9, 0xe7, 0xff, 0xf0,	0x05, 0x35, 0xe4, 0xb5,	0x35, 0x02, 0x05, 0x36,
                                    0x05, 0x31, 0xe4, 0xb5, 0x31, 0xbb, 0x05, 0x32,	0x80, 0xb7, 0x90, 0x18,	0x09, 0xe4, 0xf0, 0xa3,
                                    0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0x90, 0x18, 0x09,	0xe0, 0xf5, 0xf0, 0xa3,	0xe0, 0x42, 0xf0, 0xa3,
                                    0xe0, 0x42, 0xf0, 0xa3, 0xe0, 0x45, 0xf0, 0x70,	0x1b, 0x90, 0x18, 0xfb,	0xe4, 0xf0, 0x80, 0x14,
                                    0x74, 0x01, 0x55, 0x2d, 0xf5, 0xc4, 0x90, 0x40,	0x01, 0x74, 0x20, 0xf0,	0x75, 0xc5, 0x01, 0x90,
                                    0x18, 0xfb, 0xe4, 0xf0, 0xd0, 0xd0, 0xd0, 0x83,	0xd0, 0x82, 0xd0, 0xf0,	0xd0, 0xe0, 0x32, 0xaf,
                                    0x83, 0xe5, 0x82, 0x90, 0x18, 0x11, 0xf0, 0xef,	0xa3, 0xf0, 0x90, 0x18,	0x10, 0xe0, 0x60, 0x50,
                                    0x90, 0xc0, 0x00, 0x74, 0x0b, 0xf0, 0x74, 0x07,	0xa3, 0xf0, 0xe4, 0xa3,	0xf0, 0xa3, 0xf0, 0x90,
                                    0x18, 0x11, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x8e,	0x02, 0x8f, 0x03, 0x8b,	0x05, 0x8a, 0x04, 0x7b,
                                    0x00, 0x7a, 0x00, 0x43, 0x02, 0x0c, 0x90, 0xc0,	0x00, 0xea, 0xf0, 0xeb,	0xa3, 0xf0, 0xec, 0xa3,
                                    0xf0, 0xed, 0xa3, 0xf0, 0x7e, 0x00, 0x7d, 0x00,	0x7c, 0x00, 0x43, 0x06,	0x0d, 0x43, 0x05, 0x03,
                                    0x90, 0xc0, 0x00, 0xee, 0xf0, 0xef, 0xa3, 0xf0,	0xed, 0xa3, 0xf0, 0xec,	0xa3, 0xf0, 0x80, 0x6c,
                                    0x90, 0xc0, 0x00, 0x74, 0x0b, 0xf0, 0x74, 0x06,	0xa3, 0xf0, 0xe4, 0xa3,	0xf0, 0xa3, 0xf0, 0x90,
                                    0x18, 0x11, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x8e,	0x04, 0x8c, 0x05, 0x7c,	0x00, 0x7b, 0x00, 0x7a,
                                    0x00, 0x43, 0x04, 0x0d, 0x43, 0x03, 0x03, 0x8e,	0x00, 0x8f, 0x01, 0x78,	0x00, 0x53, 0x01, 0x01,
                                    0xe4, 0xfe, 0xe9, 0xce, 0xc4, 0x03, 0x54, 0xf8,	0xce, 0xc4, 0x03, 0xce,	0x6e, 0xce, 0x54, 0xf8,
                                    0xce, 0x6e, 0xff, 0xe8, 0xc4, 0x03, 0x54, 0xf8,	0xf9, 0xe8, 0xc4, 0x03,	0x54, 0x07, 0x4e, 0xfe,
                                    0x78, 0x00, 0xec, 0x42, 0x00, 0xed, 0x42, 0x01,	0xeb, 0x42, 0x06, 0xea,	0x42, 0x07, 0x90, 0xc0,
                                    0x00, 0xe8, 0xf0, 0xe9, 0xa3, 0xf0, 0xee, 0xa3,	0xf0, 0xef, 0xa3, 0xf0,	0x90, 0xc0, 0x14, 0xe0,
                                    0xff, 0x30, 0xe5, 0xf8, 0x90, 0xc0, 0x14, 0xe0,	0xff, 0x30, 0xe4, 0xf8,	0x90, 0xc0, 0x1c, 0xe0,
                                    0xf5, 0x82, 0x22, 0xaf, 0x83, 0xe5, 0x82, 0x90,	0x18, 0x15, 0xf0, 0xef,	0xa3, 0xf0, 0x90, 0xc0,
                                    0x00, 0x74, 0x0b, 0xf0, 0x74, 0x04, 0xa3, 0xf0,	0xe4, 0xa3, 0xf0, 0xa3,	0xf0, 0x90, 0xc0, 0x00,
                                    0x74, 0x0d, 0xf0, 0xe4, 0xa3, 0xf0, 0x74, 0x06,	0xa3, 0xf0, 0xe4, 0xa3,	0xf0, 0x90, 0xc0, 0x14,
                                    0xe0, 0xff, 0x30, 0xe5, 0xf8, 0x90, 0xc0, 0x14,	0xe0, 0xff, 0x30, 0xe4,	0xf8, 0x90, 0x18, 0x13,
                                    0xe0, 0x60, 0x71, 0x90, 0xc0, 0x00, 0x74, 0x0b,	0xf0, 0x74, 0x07, 0xa3,	0xf0, 0xe4, 0xa3, 0xf0,
                                    0xa3, 0xf0, 0x90, 0x18, 0x15, 0xe0, 0xfe, 0xa3,	0xe0, 0xff, 0x8e, 0x02,	0x8f, 0x03, 0x8b, 0x05,
                                    0x8a, 0x04, 0xe4, 0xfb, 0xfa, 0x74, 0x0c, 0x4a,	0xf5, 0x3b, 0x8b, 0x3c,	0x8c, 0x3d, 0x8d, 0x3e,
                                    0x90, 0x18, 0x14, 0xe0, 0xf9, 0xe4, 0xf8, 0xfc,	0xfd, 0xe5, 0x3b, 0x42,	0x00, 0xe5, 0x3c, 0x42,
                                    0x01, 0xe5, 0x3d, 0x42, 0x04, 0xe5, 0x3e, 0x42,	0x05, 0x90, 0xc0, 0x00,	0xe8, 0xf0, 0xe9, 0xa3,
                                    0xf0, 0xec, 0xa3, 0xf0, 0xed, 0xa3, 0xf0, 0x7e,	0x00, 0x7d, 0x00, 0x7c,	0x00, 0x43, 0x06, 0x0d,
                                    0x43, 0x05, 0x02, 0x90, 0xc0, 0x00, 0xee, 0xf0,	0xef, 0xa3, 0xf0, 0xed,	0xa3, 0xf0, 0xec, 0xa3,
                                    0xf0, 0x02, 0x16, 0x20, 0x90, 0xc0, 0x00, 0x74,	0x0b, 0xf0, 0x74, 0x06,	0xa3, 0xf0, 0xe4, 0xa3,
                                    0xf0, 0xa3, 0xf0, 0x90, 0x18, 0x14, 0xe0, 0xff,	0x7e, 0x00, 0x8e, 0x04,	0x8f, 0x05, 0x7e, 0x00,
                                    0x7f, 0x00, 0x43, 0x07, 0x0c, 0x90, 0xc0, 0x00,	0xef, 0xf0, 0xee, 0xa3,	0xf0, 0xed, 0xa3, 0xf0,
                                    0xec, 0xa3, 0xf0, 0x90, 0x18, 0x15, 0xe0, 0xfe,	0xa3, 0xe0, 0xff, 0x8e,	0x04, 0x8c, 0x05, 0x7c,
                                    0x00, 0x7b, 0x00, 0x7a, 0x00, 0x43, 0x04, 0x0d,	0x43, 0x03, 0x02, 0x8e,	0x00, 0x8f, 0x01, 0x78,
                                    0x00, 0x53, 0x01, 0x01, 0xe4, 0xfe, 0xe9, 0xce,	0xc4, 0x03, 0x54, 0xf8,	0xce, 0xc4, 0x03, 0xce,
                                    0x6e, 0xce, 0x54, 0xf8, 0xce, 0x6e, 0xff, 0xe8,	0xc4, 0x03, 0x54, 0xf8,	0xf9, 0xe8, 0xc4, 0x03,
                                    0x54, 0x07, 0x4e, 0xfe, 0x78, 0x00, 0xec, 0x42,	0x00, 0xed, 0x42, 0x01,	0xeb, 0x42, 0x06, 0xea,
                                    0x42, 0x07, 0x90, 0xc0, 0x00, 0xe8, 0xf0, 0xe9,	0xa3, 0xf0, 0xee, 0xa3,	0xf0, 0xef, 0xa3, 0xf0,
                                    0x90, 0xc0, 0x14, 0xe0, 0xff, 0x30, 0xe5, 0xf8,	0x90, 0xc0, 0x14, 0xe0,	0xff, 0x30, 0xe4, 0xf8,
                                    0x90, 0xc0, 0x00, 0x74, 0x0b, 0xf0, 0x74, 0x05,	0xa3, 0xf0, 0xe4, 0xa3,	0xf0, 0xa3, 0xf0, 0x90,
                                    0xc0, 0x00, 0x74, 0x0d, 0xf0, 0xe4, 0xa3, 0xf0,	0x74, 0x05, 0xa3, 0xf0,	0xe4, 0xa3, 0xf0, 0x90,
                                    0xc0, 0x14, 0xe0, 0xff, 0x30, 0xe5, 0xf8, 0x90,	0xc0, 0x14, 0xe0, 0xff,	0x30, 0xe4, 0xf8, 0x90,
                                    0xc0, 0x1c, 0xe0, 0xff, 0x53, 0x07, 0x01, 0xbf,	0x01, 0x02, 0x80, 0xc4,	0x22, 0xaf, 0x82, 0xae,
                                    0x83, 0xad, 0xf0, 0xfc, 0x90, 0x18, 0x17, 0xef,	0xf0, 0xee, 0xa3, 0xf0,	0xed, 0xa3, 0xf0, 0xec,
                                    0xa3, 0xf0, 0x90, 0xc0, 0x00, 0x74, 0x0b, 0xf0,	0x74, 0x06, 0xa3, 0xf0,	0xe4, 0xa3, 0xf0, 0xa3,
                                    0xf0, 0x90, 0x18, 0x17, 0xe0, 0xfc, 0xa3, 0xe0,	0xfd, 0xa3, 0xe0, 0xfe,	0xa3, 0xe0, 0x8d, 0x03,
                                    0x8c, 0x02, 0x79, 0x00, 0x78, 0x00, 0x43, 0x00,	0x0c, 0x90, 0xc0, 0x00,	0xe8, 0xf0, 0xe9, 0xa3,
                                    0xf0, 0xea, 0xa3, 0xf0, 0xeb, 0xa3, 0xf0, 0x7c,	0x00, 0x7f, 0x00, 0x43,	0x04, 0x0d, 0x90, 0xc0,
                                    0x00, 0xec, 0xf0, 0xed, 0xa3, 0xf0, 0xee, 0xa3,	0xf0, 0xef, 0xa3, 0xf0,	0x90, 0xc0, 0x14, 0xe0,
                                    0xff, 0x30, 0xe5, 0xf8, 0x90, 0xc0, 0x14, 0xe0,	0xff, 0x30, 0xe4, 0xf8,	0x22, 0x75, 0x82, 0x00,
                                    0x22, 0x12, 0x01, 0x00, 0x02, 0xff, 0xff, 0xff,	0x40, 0xf7, 0x1d, 0x00,	0x25, 0x07, 0x02, 0x00,
                                    0x00, 0x01, 0x01, 0x0a, 0x06, 0x00, 0x02, 0xff,	0xff, 0xff, 0x40, 0x01,	0x00, 0x09, 0x02, 0x42,
                                    0x00, 0x01, 0x01, 0x00, 0x80, 0xc8, 0x09, 0x04,	0x00, 0x00, 0x00, 0xff,	0xff, 0xff, 0x00, 0x09,
                                    0x04, 0x00, 0x01, 0x01, 0xff, 0xff, 0xff, 0x00,	0x07, 0x05, 0x81, 0x01,	0x00, 0x14, 0x01, 0x09,
                                    0x04, 0x00, 0x02, 0x01, 0xff, 0xff, 0xff, 0x00,	0x07, 0x05, 0x81, 0x01,	0x00, 0x04, 0x01, 0x09,
                                    0x04, 0x00, 0x03, 0x01, 0xff, 0xff, 0xff, 0x00,	0x07, 0x05, 0x81, 0x02,	0x00, 0x02, 0x00, 0x09,
                                    0x02, 0x12, 0x00, 0x01, 0x01, 0x00, 0x80, 0xc8,	0x09, 0x04, 0x00, 0x00,	0x00, 0xff, 0xff, 0xff,
                                    0x00, 0x04, 0x03, 0x09, 0x04, 0x16, 0x03, 0x30,	0x00, 0x30, 0x00, 0x30,	0x00, 0x30, 0x00, 0x30,
                                    0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,	0x00, 0x31, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,	0xaa, 0xaa, 0xaa, 0xaa,	0xee, 0xee, 0xee, 0xee,
                                    0xee, 0xee, 0xee, 0xee, 0xfe, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xff, 0xff,
                                    0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfc,	0x7e, 0xbf, 0xdf, 0xef,	0xf7, 0xfb, 0xfd, 0x7e,
                                    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,
                                    0x00, 0x03, 0x07, 0x89, 0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x08, 0x80, 0x00, 0x00,
                                    0x00, 0x00, 0x00
                                ]);

    dev.box.USB_reset_device(dh);
    dev.box.USB_control_transfer(dh, 0x40, 0x44, 0x0000, 0x0000, magic1.buffer, magic1.length, CTRL_TIMEOUT);
    dev.box.USB_control_transfer(dh, 0x40, 0x44, 0x1000, 0x0000, magic2.buffer, magic2.length, CTRL_TIMEOUT);
    dev.box.USB_control_transfer(dh, 0x40, 0x41, 0x8008, 0x0000, null, 0, CTRL_TIMEOUT);
    dev.box.USB_control_transfer(dh, 0x40, 0x40, 0x0001, 0x0000, null, 0, CTRL_TIMEOUT);
}
